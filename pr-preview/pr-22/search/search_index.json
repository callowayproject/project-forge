{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Project Forge","text":"<p>Project Forge is a composable project scaffolding tool. Developers can quickly generate new projects by only answering a few questions.</p>"},{"location":"#goals","title":"Goals","text":"<ul> <li>Create new projects from a composition of several patterns.</li> <li>Coming soon. Add new capabilities to an existing project by applying a pattern.</li> <li>Coming soon. Update a generated project using updated patterns.</li> </ul>"},{"location":"#introduction","title":"Introduction","text":"<p>Project Forge treats project building like building a sandwich. A sandwich is a combination of ingredients. The recipe for a sandwich lists the required ingredients and the assembly instructions. A person can easily alter the recipe by adding, removing, or substituting ingredients.</p> <p>Other scaffolding tools treat project building like using a vending machine. Your choices are limited by what is available in the vending machine.</p>"},{"location":"#composable-project-templates","title":"Composable project templates","text":"<p>Project Forge\u2019s key feature is that it is designed to generate projects from multiple, smaller templates called patterns.</p> <ul> <li>Special knowledge, special patterns.     Let people with the proper expertise write specific patterns.     For example, DevOps people create and update Helm or Terraform patterns, which developers can include in compositions that generate projects.</li> <li>Loose coupling.     Each pattern has its lifecycle for changes and updates independent of compositions that include it.     Patterns are treated as installable libraries with version constraints.</li> <li>Increased flexibility using simpler patterns.     Other scaffolding solutions must include all possible options in the template.     This requires complex template logic which increases template maintenance difficulty.     Using compositions to specify the combination of simple patterns gives developers more flexibility while making pattern maintainers\u2019 jobs more manageable.</li> </ul>"},{"location":"#building-a-project-like-a-sandwich","title":"Building a project like a sandwich","text":"<p>A pattern is like a sandwich ingredient. It is the smallest individual part. You can render a pattern by itself, like eating a sandwich ingredient.</p> <p>Pattern questions are like known ways of preparing sandwich ingredients. Just like a hamburger is an ingredient in a sandwich, \u201cDoneness\u201d with options of well, medium, and raw is a pattern question.</p> <p>A composition is a recipe. It includes configuration and instructions only.</p> <p>Overlays and tasks are like recipe instructions. Each overlay references a pattern and how to configure it for the composition, like \u201cHamburger, well done.\u201d A task performs an action during project generation, like \u201cstir for 3 minutes.\u201d</p>"},{"location":"cli/","title":"Command Line Interface","text":""},{"location":"cli/#project-forge","title":"project-forge","text":"<p>Generate projects from compositions and patterns.</p> <p>Usage:</p> <pre><code>project-forge [OPTIONS] COMMAND [ARGS]...\n</code></pre> <p>Options:</p> Name Type Description Default <code>--version</code> boolean Show the version and exit. <code>False</code> <code>--help</code> boolean Show this message and exit. <code>False</code>"},{"location":"cli/#build","title":"build","text":"<p>Build a project from a composition and render it to a directory.</p> <p>Usage:</p> <pre><code>project-forge build [OPTIONS] COMPOSITION\n</code></pre> <p>Options:</p> Name Type Description Default <code>--use-defaults</code> boolean Do not prompt for input and use the defaults specified in the composition. <code>False</code> <code>--output-dir</code>, <code>-o</code> directory The directory to render the composition to. Defaults to the current working directory. <code>&lt;function &lt;lambda&gt; at 0x7f03e735c0e0&gt;</code> <code>--data-file</code>, <code>-f</code> file The path to a JSON, YAML, or TOML file whose contents are added to the initial context. Great for answering some or all the answers for a composition. None <code>--data</code>, <code>-d</code> text The key-value pairs added to the initial context. Great for providing answers to composition questions. None <code>--help</code> boolean Show this message and exit. <code>False</code>"},{"location":"cli/#write-schemas","title":"write-schemas","text":"<p>Write the JSON schemas for compositions and patterns to the specified output directory.</p> <p>The JSON schemas are used by IDEs to provide validation and autocompletion. The output directory must exist and be writable by the user.</p> <p>Usage:</p> <pre><code>project-forge write-schemas [OPTIONS] OUTPUT_DIR\n</code></pre> <p>Options:</p> Name Type Description Default <code>--help</code> boolean Show this message and exit. <code>False</code>"},{"location":"explanation/","title":"Explanations","text":"<p>This page explains why Project Forge is the way it is.</p> <p>Explanation is discussion that clarifies and illuminates a particular topic. Explanation is understanding-oriented.</p> <ul> <li>Give context and background on your library</li> <li>Explain why you created it</li> <li>Provide multiple examples and approaches of how to work with it</li> <li>Help the reader make connections</li> <li>Avoid writing instructions or technical descriptions here</li> <li>More Information</li> </ul>"},{"location":"explanation/#overview","title":"Overview","text":"<p>Project Forge is a scaffolding tool. A scaffolding tool allows developers to generate a new project by answering a few questions. Developers can go from idea to coding very quickly.</p> <p>Additional needs:</p> <ul> <li>Combine several templates using composition.</li> <li>Projects can update themselves with updates from their dependent templates.</li> <li>Can use blocks within files to compose parts of files</li> <li>Don\u2019t ask the same question twice</li> </ul> <p>Issues to be aware of:</p> <ul> <li>Context collisions     - The question variable names match in two or more patterns, but their values and use are different.</li> <li>Patterns with similar questions but different names.     - <code>project_name</code> vs. <code>name_of_project</code></li> <li>Storage location of pattern configuration and pattern template     - Local-Local     - Local-Remote     - Remote-Local     - Remote-Remote</li> </ul>"},{"location":"howtos/","title":"How Tos","text":"<p>The How To\u2019s are intended as recipes for common tasks using project-forge. See the API reference for detailed reference documentation and function, class etc definitions.</p> <p>Warning</p> <p>How Tos not implemented yet!</p> <p>How-to guides are directions that take the reader through the steps required to solve a real-world problem. How-to guides are goal-oriented.</p> <p>More information</p>"},{"location":"reference/","title":"Reference","text":"<ul> <li>Location. A location is a reference to a source.</li> <li>Pattern. A set of template files to render and a rendering configuration file.</li> <li>Pattern source management. Downloading and caching the pattern sources (git repos, local directories)</li> <li>Overlay. A reference to a pattern and the configuration for using it in a specific composition.</li> <li>Composition. A list of overlays and context to render a project.</li> <li>Template Rendering Engine. The system that defines the structure of the templates and renders them into the final product</li> <li>Tasks. Commands that are run during the generation process.</li> <li>Context. The set of values that the template rendering engine uses to render templates</li> <li>Question management. Manages the questions across multiple overlays in a composition. Handles actual validation (Passes UI a validation function for each question)</li> <li>User input. Manages the questioning, validation, and error handling of user input for the pattern questions.</li> <li>Migrations. Adding overlays and updating overlays on projects</li> </ul>"},{"location":"reference/composition/","title":"Composition","text":"<p>A composition defines a set of overlays and methods of context manipulation.</p> <p>The composition file is a list of overlay objects. An overlay is a reference to a pattern configuration with the ability to adjust the pattern\u2019s configuration.</p>"},{"location":"reference/composition/#template","title":"Template","text":""},{"location":"reference/context/","title":"Context","text":"<p>The context holds the variables available when rendering a template. It is a nested key/value data structure.</p>"},{"location":"reference/context/#building-the-context","title":"Building the context","text":"<p>Patterns provide the core context by asking the user a question and associating the answer with a key.</p> <p>Patterns, Overlays, and Compositions all have <code>extra_context</code> attributes that provide a method to add key/values to the context without prompting the user.</p> <p>Overlays provide an <code>answer_map</code> attribute to map one pattern key/value to another.</p> <p>Compositions use <code>merge_keys</code> to merge the values of common pattern keys.</p> <p>Contexts are built iteratively question by question and pattern by pattern.</p> <p>The default answer of a question to be the answer to a previous question.</p> <p>Patterns may have keys that whose answers should be the same, but their keys are different. For example, one pattern might use <code>project_name</code> and another might use <code>library_name</code>. The overlay\u2019s <code>answer_map</code> allows you to map the answer of <code>project_name</code> to answer of <code>library_name</code>.</p> <p>Patterns that define complex data structures, such as <code>list</code>s or <code>dict</code>s, may be merged between patterns using the composition\u2019s <code>merge_keys</code> attribute. For example, if several patterns define a <code>requirements</code> dict as in their <code>extra_context</code>, you can have the composition merge all the values of <code>requirements</code>.</p>"},{"location":"reference/location/","title":"Location","text":"<p>The location is a hashable reference to a source. A location consists of a <code>url</code> and <code>path</code> combination.</p> <p>All fields that accept a location object will also accept a string representing a URL or a path. So the following are equivalent:</p> Locations specified by strings<pre><code>overlays = [\n  { pattern_location = \"python-package/pattern.toml\" },\n  { pattern_location = \"https://github.com/owner/repository/\" },\n]\n</code></pre> Locations specified by objects<pre><code>overlays = [\n  { pattern_location = { path = \"python-package/pattern.toml\" } },\n  { pattern_location = { url = \"https://github.com/owner/repository/\" } },\n]\n</code></pre> <p>At least one of <code>path</code> or <code>url</code> must be specified. Here is how the <code>url</code> and <code>path</code> attributes work together:</p> <ul> <li><code>url</code> specified, <code>path</code> specified: The <code>path</code> is resolved using the root of the repository. Relative paths cannot resolve to locations outside the repository.</li> </ul> <ul> <li><code>url</code> specified, <code>path</code> unspecified: The <code>path</code> is the root of the repository.</li> </ul> <ul> <li><code>url</code> unspecified, <code>path</code> specified: The <code>path</code> is resolved using the local filesystem and current working directory.</li> </ul>"},{"location":"reference/location/#supported-url-formats","title":"Supported URL formats","text":"<ul> <li>Normal URLs: <code>scheme://netloc/path;parameters?query#fragment</code></li> <li>SSH urls: <code>user@domain/path</code></li> </ul>"},{"location":"reference/location/#path-formats","title":"Path formats","text":"<ul> <li>relative or absolute path to the object within the URL or local filesystem</li> </ul>"},{"location":"reference/location/#recipes","title":"Recipes","text":""},{"location":"reference/location/#specify-branches-tags-or-commits","title":"Specify branches, tags, or commits","text":"<p>GitHub</p> <ul> <li><code>https://github.com/owner/repository/tree/[branch-or-tag]</code></li> <li><code>https://github.com/owner/repository/commit/[commit-SHA]</code></li> </ul> <p>GitLab</p> <ul> <li><code>https://gitlab.com/owner/repository/-/tree/[branch-or-tag]</code></li> <li><code>https://gitlab.com/owner/repository/-/commit/[commit-SHA]</code></li> </ul> <p>Using <code>@</code> or <code>#</code></p> <ul> <li><code>https://&lt;domain&gt;/owner/repository@[branch/tag/commit]</code></li> <li><code>https://&lt;domain&gt;/owner/repository#[branch/tag/commit]</code></li> </ul>"},{"location":"reference/location/#specify-a-directory-within-a-url","title":"Specify a directory within a URL","text":"<p>Specify both the <code>url</code> and the <code>path</code> attributes. The <code>path</code> should be the path from the root of the repository to the location.</p>"},{"location":"reference/migrations/","title":"Migrations","text":"<pre><code>flowchart LR\n    Composition --&gt;|contains| Overlay --&gt;|references location of| Pattern\\nConfiguration --&gt;|references location of| Pattern\\nTemplate</code></pre> <ul> <li>The anchor for changes is:<p>- The location of the   - the hashed value of the composition and its overlays       - This detects changes to overridden values and changes to pattern configuration locations (like a more up-to-date git reference)</p> </li> </ul> <ul> <li>What to store<p>- Store the composition location   - Store the composition contents hash to detect if its overrides have changed       - This catches when the pattern configuration location changes (like a more up-to-date git reference)   - For each pattern       - Store the requested location from the overlay       - This will provide information if a specific version of the pattern was requested           - The location may be very generic (like a GitHub repo), or very specific (commit 123456 of the repo)       - Store the location used:           - For git URLs, this would be a URL to a specific reference           - Will need to be able to resolve the specificity of Git references               - branches -&gt; current commit               - tags -&gt; commit</p> </li> </ul>"},{"location":"reference/pattern/","title":"Pattern","text":"<p>Patterns are meant to be focused and reusable chunks of templated content. Although patterns are renderable as-is, you may combine patterns using a composition.</p> <p>A pattern consists of a set of template files and a configuration file.</p>"},{"location":"reference/pattern/#pattern-configuration","title":"Pattern configuration","text":"<p>The configuration file defines the context required to render the template and the rendering rules.</p> <p>You may use YAML, JSON, or TOML formatting to define the configuration.</p> TOMLJSONYAML <pre><code>template_location = \"{{ repo_name }}\"\ncopy_only = [\n  \"overrides/**/*\",\n  \"overrides/**/.*\",\n]\n\n[[questions]]\nname = \"project_name\"\nprompt = \"What is the human-friendly name of the project?\"\ntype = \"str\"\ndefault = \"My Project\"\n\n[[questions]]\nname = \"package_name\"\nprompt = \"What is the name of the Python package?\"\ntype = \"str\"\ndefault = \"{{ project_name|lower|replace(' ', '_') }}\"\n\n[[questions]]\nname = \"repo_name\"\nprompt = \"What is the name of the project repository?\"\ntype = \"str\"\ndefault = \"{{ package_name|replace('_', '-') }}\"\n\n[[questions]]\nname = \"project_description\"\nhelp = \"A sentence or two about what this project does.\"\ntype = \"str\"\ndefault = \"\"\n\n[extra_context.requirements]\ndocs = [\n  \"black\",\n  \"markdown-customblocks\",\n  \"mdx-truly-sane-lists\",\n  \"mkdocs\",\n  \"mkdocs-click\",\n  \"mkdocs-gen-files\",\n  \"mkdocs-git-authors-plugin\",\n  \"mkdocs-git-committers-plugin\",\n  \"mkdocs-git-revision-date-localized-plugin\",\n  \"mkdocs-include-markdown-plugin\",\n  \"mkdocs-literate-nav\",\n  \"mkdocs-material\",\n  \"mkdocs-section-index\",\n  \"mkdocstrings[python]\",\n  \"python-frontmatter\",\n]\n</code></pre> <pre><code>{\n  \"template_location\": \"{{ repo_name }}\",\n  \"copy_only\": [\n    \"overrides/**/*\",\n    \"overrides/**/.*\"\n  ],\n  \"questions\": [\n    {\n      \"name\": \"project_name\",\n      \"prompt\": \"What is the human-friendly name of the project?\",\n      \"type\": \"str\",\n      \"default\": \"My Project\"\n    },\n    {\n      \"name\": \"package_name\",\n      \"prompt\": \"What is the name of the Python package?\",\n      \"type\": \"str\",\n      \"default\": \"{{ project_name|lower|replace(' ', '_') }}\"\n    },\n    {\n      \"name\": \"repo_name\",\n      \"prompt\": \"What is the name of the project repository?\",\n      \"type\": \"str\",\n      \"default\": \"{{ package_name|replace('_', '-') }}\"\n    },\n    {\n      \"name\": \"project_description\",\n      \"help\": \"A sentence or two about what this project does.\",\n      \"type\": \"str\",\n      \"default\": \"\"\n    }\n  ],\n  \"extra_context\": {\n    \"requirements\": {\n      \"docs\": [\n        \"black\",\n        \"markdown-customblocks\",\n        \"mdx-truly-sane-lists\",\n        \"mkdocs\",\n        \"mkdocs-click\",\n        \"mkdocs-gen-files\",\n        \"mkdocs-git-authors-plugin\",\n        \"mkdocs-git-committers-plugin\",\n        \"mkdocs-git-revision-date-localized-plugin\",\n        \"mkdocs-include-markdown-plugin\",\n        \"mkdocs-literate-nav\",\n        \"mkdocs-material\",\n        \"mkdocs-section-index\",\n        \"mkdocstrings[python]\",\n        \"python-frontmatter\"\n      ]\n    }\n  }\n}\n</code></pre> <pre><code>template_location: '{{ repo_name }}'\ncopy_only:\n  - overrides/**/*\n  - overrides/**/.*\nquestions:\n  - default: My Project\n    name: project_name\n    prompt: What is the human-friendly name of the project?\n    type: str\n  - default: \"{{ project_name|lower|replace(' ', '_') }}\"\n    name: package_name\n    prompt: What is the name of the Python package?\n    type: str\n  - default: \"{{ package_name|replace('_', '-') }}\"\n    name: repo_name\n    prompt: What is the name of the project repository?\n    type: str\n  - default: ''\n    help: A sentence or two about what this project does.\n    name: project_description\n    type: str\nextra_context:\n  requirements:\n    docs:\n      - black\n      - markdown-customblocks\n      - mdx-truly-sane-lists\n      - mkdocs\n      - mkdocs-click\n      - mkdocs-gen-files\n      - mkdocs-git-authors-plugin\n      - mkdocs-git-committers-plugin\n      - mkdocs-git-revision-date-localized-plugin\n      - mkdocs-include-markdown-plugin\n      - mkdocs-literate-nav\n      - mkdocs-material\n      - mkdocs-section-index\n      - mkdocstrings[python]\n      - python-frontmatter\n</code></pre> <p>Includes:</p> <ul> <li>Pattern settings</li> <li>Question objects</li> <li>Choice objects</li> </ul>"},{"location":"reference/pattern/#pattern-templates","title":"Pattern Templates","text":"<ul> <li>how context is presented</li> <li>default behavior is to render each template file in the pattern and save the results to the destination.</li> <li>Template files that match a path or glob pattern in the <code>skip</code> attribute are available for inclusion in other templates, but are not rendered individually or saved to the destination</li> <li>Template files that match a path or glob pattern in the <code>copy_only</code> attribute are not rendered. Their contents are copied to the destination</li> </ul>"},{"location":"reference/pattern/#pattern-source-manager","title":"Pattern source manager","text":"<ul> <li>Contains the interface for accessing local copies of the pattern templates</li> <li>Caching logic     - Local checkouts for remote repositories</li> <li>Hashing sources to detect changes</li> </ul>"},{"location":"reference/pattern/#sources-of-patterns","title":"Sources of patterns","text":"<ul> <li>Local directory     - For local Git repositories, we will need to deal with the potential of a dirty repo and how that affects the snapshot         - Treat it as a Non-Git repository         - Don\u2019t allow dirty repositories: raise an error     - Non-Git directories         - Hash the contents of the directory.         - Treat it as \u201calways new\u201d.</li> </ul>"},{"location":"reference/question/","title":"Questions","text":"<ul> <li>Treats everything as a composition.</li> <li>Resolves the dependency tree for questions across all overlays</li> <li>Uses the User Interface to ask questions and updates context and dependencies</li> <li>Output is a single context used to render all templates</li> <li>Handles validation     - Can pass validation function for each question to user interface</li> <li>Interface:     - <code>Pattern</code> or <code>Composition</code>     - <code>UI</code> (reference)</li> </ul>"},{"location":"reference/tasks/","title":"Tasks","text":""},{"location":"reference/template_engine/","title":"Template Engine","text":""},{"location":"reference/user_interface/","title":"User interface","text":"<ul> <li>Provides interface for different types of questions, validation, error handling, etc</li> </ul> <ul> <li>messaging of status or state</li> </ul> <ul> <li>Abstract enough that it is pluggable for both console or web or other</li> </ul> <ul> <li>Interface<p>- <code>type</code>   - <code>prompt</code>   - <code>help</code>   - <code>choices</code>   - <code>multiselect</code>   - <code>default</code> (pre-rendered)   - <code>validator</code> (a function to call to validate the input)</p> </li> </ul> <ul> <li>Returns the answer</li> </ul>"},{"location":"reference/validations/","title":"Validations","text":"<p>is_boolean | Return true if the object is a boolean value. is_defined | Checks if a value is defined. is_divisibleby | Return true if the value is divisible by another one. is_endingwith | Checks if the value is ending with a string. is_eq | Test version of ==. is_even | Checks if a value is even. is_false | Checks if a value is false. is_filter | Checks if a filter with a given name is available. is_float | Checks if this value is a float is_ge | Test version of &gt;=. is_gt | Test version of &gt;. is_in | Test version of in. is_integer | Checks if this value is an integer. is_iterable | Checks if this value can be iterated over. is_le | Test version of \\&lt;=. is_lower | Checks if a string is all lowercase. is_lt | Test version of \\&lt;. is_mapping | Checks if this value is a mapping is_ne | Test version of !=. is_none | Checks if a value is none. is_number | Checks if this value is a number. is_odd | Checks if a value is odd. is_safe | Checks if a value is safe. is_sequence | Checks if this value is a sequence is_startingwith | Checks if the value is starting with a string. is_string | Checks if this value is a string. is_test | Checks if a test with a given name is available. is_true | Checks if a value is true. is_undefined | Checks if a value is undefined. is_upper | Checks if a string is all uppercase.</p> <ul> <li>pattern</li> </ul>"},{"location":"reference/api/SUMMARY/","title":"SUMMARY","text":"<ul> <li>project_forge     * caching     * cli     * commands         * build         * export_schemas     * context_builder         * context         * data_merge         * overlays         * questions         * tasks     * core         * exceptions         * io         * types         * urls         * validators     * git_commands     * models         * composition         * location         * overlay         * pattern         * task     * path_matching     * rendering         * environment         * expressions         * render         * templates     * settings     * testing         * plugin     * ui         * defaults         * terminal     * utils</li> </ul>"},{"location":"reference/api/project_forge/","title":"Index","text":""},{"location":"reference/api/project_forge/caching/","title":"caching","text":"<p>Caching operations.</p>"},{"location":"reference/api/project_forge/caching/#project_forge.caching-classes","title":"Classes","text":""},{"location":"reference/api/project_forge/caching/#project_forge.caching-functions","title":"Functions","text":""},{"location":"reference/api/project_forge/caching/#project_forge.caching.clone_repo","title":"clone_repo","text":"<pre><code>clone_repo(url: ParsedURL) -&gt; Path\n</code></pre> <p>Clone and cache a Git repository.</p> <p>Previously cloned repositories are updated unless they point to a specific reference.</p> PARAMETER DESCRIPTION <code>url</code> <p>The URL to the Git repository</p> <p> TYPE: <code>ParsedURL</code> </p> RETURNS DESCRIPTION <code>Path</code> <p>The full path to the cloned and cached remote repository or the local directory.</p>"},{"location":"reference/api/project_forge/caching/#project_forge.caching.get_cache_dir","title":"get_cache_dir","text":"<pre><code>get_cache_dir() -&gt; Path\n</code></pre> <p>Get the path to store cached repos.</p> RETURNS DESCRIPTION <code>Path</code> <p>Path to the cache directory or a temporary directory if caching is disabled.</p>"},{"location":"reference/api/project_forge/caching/#project_forge.caching.get_remote_clone","title":"get_remote_clone","text":"<pre><code>get_remote_clone(parsed_url: ParsedURL) -&gt; Path\n</code></pre> <p>Return the path to a locally cloned remote repo.</p> <p>This provides some error-checking for the cached repo, and will re-clone if the cached repo is in a detached head state.</p> PARAMETER DESCRIPTION <code>parsed_url</code> <p>The parsed Git URL to clone</p> <p> TYPE: <code>ParsedURL</code> </p> RETURNS DESCRIPTION <code>Path</code> <p>The path to the locally cloned repository</p>"},{"location":"reference/api/project_forge/cli/","title":"cli","text":"<p>The command-line interface.</p>"},{"location":"reference/api/project_forge/cli/#project_forge.cli-functions","title":"Functions","text":""},{"location":"reference/api/project_forge/cli/#project_forge.cli.build","title":"build","text":"<pre><code>build(\n    composition: Path,\n    use_defaults: bool,\n    output_dir: Path,\n    data_file: Optional[Path] = None,\n    data: Optional[tuple[tuple[str, str], ...]] = None,\n)\n</code></pre> <p>Build a project from a composition and render it to a directory.</p>"},{"location":"reference/api/project_forge/cli/#project_forge.cli.cli","title":"cli","text":"<pre><code>cli(ctx: Context) -&gt; None\n</code></pre> <p>Generate projects from compositions and patterns.</p>"},{"location":"reference/api/project_forge/cli/#project_forge.cli.write_schemas","title":"write_schemas","text":"<pre><code>write_schemas(output_dir: Path)\n</code></pre> <p>Write the JSON schemas for compositions and patterns to the specified output directory.</p> <p>The JSON schemas are used by IDEs to provide validation and autocompletion. The output directory must exist and be writable by the user.</p>"},{"location":"reference/api/project_forge/git_commands/","title":"git_commands","text":"<p>Functions for using git.</p>"},{"location":"reference/api/project_forge/git_commands/#project_forge.git_commands-classes","title":"Classes","text":""},{"location":"reference/api/project_forge/git_commands/#project_forge.git_commands-functions","title":"Functions","text":""},{"location":"reference/api/project_forge/git_commands/#project_forge.git_commands.apply_patch","title":"apply_patch","text":"<pre><code>apply_patch(repo: Repo, diff: str) -&gt; None\n</code></pre> <p>Apply a patch to a destination directory.</p> <p>A git 3 way merge is the best bet at applying patches.</p> PARAMETER DESCRIPTION <code>repo</code> <p>The git repo to apply the patch to</p> <p> TYPE: <code>Repo</code> </p> <code>diff</code> <p>The previously calculated diff</p> <p> TYPE: <code>str</code> </p>"},{"location":"reference/api/project_forge/git_commands/#project_forge.git_commands.branch_exists","title":"branch_exists","text":"<pre><code>branch_exists(repo: Repo, branch_name: str) -&gt; bool\n</code></pre> <p>Does the branch exist in the repo?</p> PARAMETER DESCRIPTION <code>repo</code> <p>The repository to check</p> <p> TYPE: <code>Repo</code> </p> <code>branch_name</code> <p>The name of the branch to check for</p> <p> TYPE: <code>str</code> </p> RETURNS DESCRIPTION <code>bool</code> <p><code>True</code> if the branch exists</p>"},{"location":"reference/api/project_forge/git_commands/#project_forge.git_commands.checkout_branch","title":"checkout_branch","text":"<pre><code>checkout_branch(\n    repo: Repo,\n    branch_name: str,\n    remote_name: str = \"origin\",\n) -&gt; None\n</code></pre> <p>Checkout a local or remote branch.</p>"},{"location":"reference/api/project_forge/git_commands/#project_forge.git_commands.checkout_ref","title":"checkout_ref","text":"<pre><code>checkout_ref(repo: Repo, ref: str) -&gt; None\n</code></pre> <p>Checkout a ref.</p> PARAMETER DESCRIPTION <code>repo</code> <p>The repository to check out</p> <p> TYPE: <code>Repo</code> </p> <code>ref</code> <p>The ref to check out</p> <p> TYPE: <code>str</code> </p>"},{"location":"reference/api/project_forge/git_commands/#project_forge.git_commands.clone","title":"clone","text":"<pre><code>clone(\n    repo_url: ParsedURL, dest_path: Optional[Path] = None\n) -&gt; Repo\n</code></pre> <p>Clone a repo.</p> PARAMETER DESCRIPTION <code>repo_url</code> <p>The parsed Git repository URL.</p> <p> TYPE: <code>ParsedURL</code> </p> <code>dest_path</code> <p>The path to clone to.</p> <p> TYPE: <code>Optional[Path]</code> DEFAULT: <code>None</code> </p> RETURNS DESCRIPTION <code>Repo</code> <p>The repository.</p>"},{"location":"reference/api/project_forge/git_commands/#project_forge.git_commands.get_repo","title":"get_repo","text":"<pre><code>get_repo(\n    project_dir: Union[str, Path],\n    search_parent_directories: bool = False,\n    ensure_clean: bool = False,\n) -&gt; Repo\n</code></pre> <p>Get the git Repo object for a directory.</p> PARAMETER DESCRIPTION <code>project_dir</code> <p>The directory containing the .git folder</p> <p> TYPE: <code>Union[str, Path]</code> </p> <code>search_parent_directories</code> <p>if <code>True</code>, all parent directories will be searched for a valid repo as well.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>ensure_clean</code> <p>if <code>True</code>, raise an error if the repo is dirty</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> RAISES DESCRIPTION <code>GitError</code> <p>If the directory is not a git repo</p> <code>GitError</code> <p>If the directory git repository is dirty</p> RETURNS DESCRIPTION <code>Repo</code> <p>The GitPython Repo object</p>"},{"location":"reference/api/project_forge/git_commands/#project_forge.git_commands.remote_branch_exists","title":"remote_branch_exists","text":"<pre><code>remote_branch_exists(\n    repo: Repo,\n    branch_name: str,\n    remote_name: str = \"origin\",\n) -&gt; bool\n</code></pre> <p>Does the branch exist in the remote repo?</p> PARAMETER DESCRIPTION <code>repo</code> <p>The repository to check</p> <p> TYPE: <code>Repo</code> </p> <code>branch_name</code> <p>The name of the branch to check for</p> <p> TYPE: <code>str</code> </p> <code>remote_name</code> <p>The name of the remote reference. Defaults to <code>origin</code></p> <p> TYPE: <code>str</code> DEFAULT: <code>'origin'</code> </p> RETURNS DESCRIPTION <code>bool</code> <p><code>True</code> if the branch exists in the remote repository</p>"},{"location":"reference/api/project_forge/git_commands/#project_forge.git_commands.temp_git_worktree_dir","title":"temp_git_worktree_dir","text":"<pre><code>temp_git_worktree_dir(\n    repo_path: Path,\n    worktree_path: Optional[Path] = None,\n    branch: Optional[str] = None,\n    commit: Optional[str] = None,\n) -&gt; Iterator[Path]\n</code></pre> <p>Context Manager for a temporary working directory of a branch in a git repo.</p> <p>Inspired by https://github.com/thomasjahoda/cookiecutter_project_upgrader/blob/master/ cookiecutter_project_upgrader/logic.py</p> <p>Logic for checking out a branch or commit:</p> <ul> <li>If a commit is provided, use that</li> <li>If a branch is provided, and it is not the current branch, use that</li> <li>If a branch is provided, and it is the current branch, use the current commit</li> <li>If neither a branch nor a commit is provided, use the current branch and commit</li> </ul> PARAMETER DESCRIPTION <code>repo_path</code> <p>The path to the template git repo</p> <p> TYPE: <code>Path</code> </p> <code>worktree_path</code> <p>The path put the worktree in. Defaults to a temporary directory.</p> <p> TYPE: <code>Optional[Path]</code> DEFAULT: <code>None</code> </p> <code>branch</code> <p>The branch to check out</p> <p> TYPE: <code>Optional[str]</code> DEFAULT: <code>None</code> </p> <code>commit</code> <p>The optional commit to check out</p> <p> TYPE: <code>Optional[str]</code> DEFAULT: <code>None</code> </p> YIELDS DESCRIPTION <code>Path</code> <p>The worktree_path</p> <p> TYPE:: <code>Path</code> </p> RAISES DESCRIPTION <code>GitError</code> <p>If the worktree could not be created</p>"},{"location":"reference/api/project_forge/path_matching/","title":"path_matching","text":"<p>Matching files and patterns.</p>"},{"location":"reference/api/project_forge/path_matching/#project_forge.path_matching-functions","title":"Functions","text":""},{"location":"reference/api/project_forge/path_matching/#project_forge.path_matching.matches_any_glob","title":"matches_any_glob","text":"<pre><code>matches_any_glob(\n    path: Union[str, Path], patterns: List[str]\n) -&gt; bool\n</code></pre> <p>Does the path match any of the glob patterns?</p> PARAMETER DESCRIPTION <code>path</code> <p>Path to test</p> <p> TYPE: <code>Union[str, Path]</code> </p> <code>patterns</code> <p>A list of glob patterns</p> <p> TYPE: <code>List[str]</code> </p> RETURNS DESCRIPTION <code>bool</code> <p><code>True</code> if it matches any of the patterns</p>"},{"location":"reference/api/project_forge/path_matching/#project_forge.path_matching.rel_fnmatch","title":"rel_fnmatch","text":"<pre><code>rel_fnmatch(name: str, pat: str) -&gt; bool\n</code></pre> <p>Force a relative match of the pattern by prefixing a <code>*</code>.</p>"},{"location":"reference/api/project_forge/settings/","title":"settings","text":"<p>Settings for project forge.</p>"},{"location":"reference/api/project_forge/settings/#project_forge.settings-classes","title":"Classes","text":""},{"location":"reference/api/project_forge/settings/#project_forge.settings.Settings","title":"Settings","text":"<p>               Bases: <code>BaseSettings</code></p> <p>The configuration for the project forge.</p>"},{"location":"reference/api/project_forge/settings/#project_forge.settings-functions","title":"Functions","text":""},{"location":"reference/api/project_forge/settings/#project_forge.settings.get_settings","title":"get_settings","text":"<pre><code>get_settings(\n    config_file: Path = DEFAULT_CONFIG_FILE,\n) -&gt; Settings\n</code></pre> <p>Return the settings.</p>"},{"location":"reference/api/project_forge/utils/","title":"utils","text":"<p>General utilities.</p>"},{"location":"reference/api/project_forge/utils/#project_forge.utils-functions","title":"Functions","text":""},{"location":"reference/api/project_forge/utils/#project_forge.utils.inside_dir","title":"inside_dir","text":"<pre><code>inside_dir(dir_path: Path) -&gt; Generator[None, None, None]\n</code></pre> <p>Temporarily switch the current directory to the given path.</p> PARAMETER DESCRIPTION <code>dir_path</code> <p>path of the directory the command is being run.</p> <p> TYPE: <code>Path</code> </p>"},{"location":"reference/api/project_forge/utils/#project_forge.utils.remove_none_values","title":"remove_none_values","text":"<pre><code>remove_none_values(mapping: MutableMapping) -&gt; dict\n</code></pre> <p>Removes keys with <code>None</code> values from a mapping.</p> PARAMETER DESCRIPTION <code>mapping</code> <p>A dict-like structure</p> <p> TYPE: <code>MutableMapping</code> </p> RETURNS DESCRIPTION <code>dict</code> <p>A new dictionary with no <code>None</code> values.</p>"},{"location":"reference/api/project_forge/commands/","title":"Index","text":"<p>Command implementation.</p>"},{"location":"reference/api/project_forge/commands/build/","title":"build","text":"<p>Starting point to render a project.</p>"},{"location":"reference/api/project_forge/commands/build/#project_forge.commands.build-classes","title":"Classes","text":""},{"location":"reference/api/project_forge/commands/build/#project_forge.commands.build-functions","title":"Functions","text":""},{"location":"reference/api/project_forge/commands/build/#project_forge.commands.build.build_project","title":"build_project","text":"<pre><code>build_project(\n    composition_file: Path,\n    output_dir: Path,\n    ui_function: UIFunction,\n    initial_context: Optional[dict] = None,\n) -&gt; BuildResult\n</code></pre> <p>Render a project to a directory.</p>"},{"location":"reference/api/project_forge/commands/export_schemas/","title":"export_schemas","text":"<p>Export the schemas for the compositions and patterns.</p>"},{"location":"reference/api/project_forge/commands/export_schemas/#project_forge.commands.export_schemas-classes","title":"Classes","text":""},{"location":"reference/api/project_forge/commands/export_schemas/#project_forge.commands.export_schemas.SchemaResult","title":"SchemaResult  <code>dataclass</code>","text":"<pre><code>SchemaResult(composition_schema: str, pattern_schema: str)\n</code></pre> <p>The result of exporting the schemas.</p>"},{"location":"reference/api/project_forge/commands/export_schemas/#project_forge.commands.export_schemas-functions","title":"Functions","text":""},{"location":"reference/api/project_forge/commands/export_schemas/#project_forge.commands.export_schemas.export_schemas","title":"export_schemas","text":"<pre><code>export_schemas() -&gt; SchemaResult\n</code></pre> <p>Export the schemas.</p>"},{"location":"reference/api/project_forge/commands/export_schemas/#project_forge.commands.export_schemas.generate_schema","title":"generate_schema","text":"<pre><code>generate_schema(model: type[BaseModel]) -&gt; str\n</code></pre> <p>Generates a JSON schema representation of a given Pydantic model.</p> <p>This function takes a Pydantic model and a schema ID to generate a JSON schema that adheres to the given $schema version of \u201chttps://json-schema.org/draft/2020-12/schema\u201d. The resulting JSON schema includes the provided schema ID.</p> PARAMETER DESCRIPTION <code>model</code> <p>The Pydantic model to generate the JSON schema for.</p> <p> TYPE: <code>type[BaseModel]</code> </p> RETURNS DESCRIPTION <code>str</code> <p>A JSON string representing the schema for the provided Pydantic model.</p>"},{"location":"reference/api/project_forge/context_builder/","title":"Index","text":"<p>A package for managing, compiling, and validating user questions for a composition or pattern.</p>"},{"location":"reference/api/project_forge/context_builder/context/","title":"context","text":"<p>Builds and manages the rendering context.</p>"},{"location":"reference/api/project_forge/context_builder/context/#project_forge.context_builder.context-classes","title":"Classes","text":""},{"location":"reference/api/project_forge/context_builder/context/#project_forge.context_builder.context-functions","title":"Functions","text":""},{"location":"reference/api/project_forge/context_builder/context/#project_forge.context_builder.context.build_context","title":"build_context","text":"<pre><code>build_context(\n    composition: Composition,\n    ui: Callable,\n    initial_context: Optional[dict] = None,\n) -&gt; dict\n</code></pre> <p>Build the context for the composition.</p> <ul> <li>set running_context to starting_context (the default from project forge)</li> <li>render composition\u2019s extra_context using running_context</li> <li>update running_context with composition\u2019s extra_context</li> <li>for each overlay     - process_overlay     - update running_context with the result of process_overlay</li> </ul> PARAMETER DESCRIPTION <code>composition</code> <p>The composition configuration.</p> <p> TYPE: <code>Composition</code> </p> <code>ui</code> <p>A callable that takes question information and returns the result from the user interface.</p> <p> TYPE: <code>Callable</code> </p> <code>initial_context</code> <p>The initial context to add to the context.</p> <p> TYPE: <code>Optional[dict]</code> DEFAULT: <code>None</code> </p> RETURNS DESCRIPTION <code>dict</code> <p>A dictionary</p>"},{"location":"reference/api/project_forge/context_builder/context/#project_forge.context_builder.context.get_starting_context","title":"get_starting_context","text":"<pre><code>get_starting_context() -&gt; dict\n</code></pre> <p>The starting context for all configurations.</p>"},{"location":"reference/api/project_forge/context_builder/context/#project_forge.context_builder.context.update_context","title":"update_context","text":"<pre><code>update_context(\n    merge_keys: Mapping[str, MergeMethods],\n    left: dict,\n    right: dict,\n) -&gt; dict\n</code></pre> <p>Return a dict where the left is updated with the right according to the composition rules.</p>"},{"location":"reference/api/project_forge/context_builder/data_merge/","title":"data_merge","text":"<p>Tools for merging data.</p>"},{"location":"reference/api/project_forge/context_builder/data_merge/#project_forge.context_builder.data_merge-attributes","title":"Attributes","text":""},{"location":"reference/api/project_forge/context_builder/data_merge/#project_forge.context_builder.data_merge.COMPREHENSIVE","title":"COMPREHENSIVE  <code>module-attribute</code>","text":"<pre><code>COMPREHENSIVE = 'comprehensive'\n</code></pre> <p>Comprehensively merge the two data structures.</p> <ul> <li>Scalars are overwritten by the new values</li> <li>lists are merged and de-duplicated</li> <li>dicts are recursively merged</li> </ul>"},{"location":"reference/api/project_forge/context_builder/data_merge/#project_forge.context_builder.data_merge.UPDATE","title":"UPDATE  <code>module-attribute</code>","text":"<pre><code>UPDATE = 'update'\n</code></pre> <p>Overwrite at the top level like <code>dict.update()</code>.</p>"},{"location":"reference/api/project_forge/context_builder/data_merge/#project_forge.context_builder.data_merge-functions","title":"Functions","text":""},{"location":"reference/api/project_forge/context_builder/data_merge/#project_forge.context_builder.data_merge.comprehensive_merge","title":"comprehensive_merge","text":"<pre><code>comprehensive_merge(left_val: T, right_val: T) -&gt; T\n</code></pre> <p>Merges data comprehensively.</p> <p>All arguments must be of the same type.</p> <ul> <li>Scalars are overwritten by the new values</li> <li>lists are merged and de-duplicated</li> <li>dicts are recursively merged</li> </ul> PARAMETER DESCRIPTION <code>left_val</code> <p>The item to merge into</p> <p> TYPE: <code>T</code> </p> <code>right_val</code> <p>The item to merge from</p> <p> TYPE: <code>T</code> </p> RETURNS DESCRIPTION <code>T</code> <p>The merged data</p>"},{"location":"reference/api/project_forge/context_builder/data_merge/#project_forge.context_builder.data_merge.freeze_data","title":"freeze_data","text":"<pre><code>freeze_data(obj: set | frozenset) -&gt; frozenset\n</code></pre><pre><code>freeze_data(obj: tuple | list) -&gt; tuple\n</code></pre><pre><code>freeze_data(\n    obj: dict | OrderedDict | immutabledict,\n) -&gt; immutabledict\n</code></pre><pre><code>freeze_data(obj: str) -&gt; str\n</code></pre><pre><code>freeze_data(obj: int) -&gt; int\n</code></pre><pre><code>freeze_data(obj: float) -&gt; float\n</code></pre><pre><code>freeze_data(obj: bytes) -&gt; bytes\n</code></pre> <pre><code>freeze_data(obj: Any) -&gt; Any\n</code></pre> <p>Check type and recursively return a new read-only object.</p>"},{"location":"reference/api/project_forge/context_builder/data_merge/#project_forge.context_builder.data_merge.merge_iterables","title":"merge_iterables","text":"<pre><code>merge_iterables(iter1: Iterable, iter2: Iterable) -&gt; set\n</code></pre> <p>Merge and de-duplicate a bunch of lists into a single list.</p> <p>Order is not guaranteed.</p> PARAMETER DESCRIPTION <code>iter1</code> <p>An Iterable</p> <p> TYPE: <code>Iterable</code> </p> <code>iter2</code> <p>An Iterable</p> <p> TYPE: <code>Iterable</code> </p> RETURNS DESCRIPTION <code>set</code> <p>The merged, de-duplicated sequence as a set</p>"},{"location":"reference/api/project_forge/context_builder/data_merge/#project_forge.context_builder.data_merge.nested_overwrite","title":"nested_overwrite","text":"<pre><code>nested_overwrite(*dicts: dict) -&gt; dict\n</code></pre> <p>Merges dicts deeply.</p> PARAMETER DESCRIPTION <code>*dicts</code> <p>List of dicts to merge with the first one as the base</p> <p> TYPE: <code>dict</code> DEFAULT: <code>()</code> </p> RETURNS DESCRIPTION <code>dict</code> <p>The merged dict</p> <p> TYPE: <code>dict</code> </p>"},{"location":"reference/api/project_forge/context_builder/data_merge/#project_forge.context_builder.data_merge.update","title":"update","text":"<pre><code>update(left_val: T, right_val: T) -&gt; T\n</code></pre> <p>Do a <code>dict.update</code> on all the dicts.</p>"},{"location":"reference/api/project_forge/context_builder/overlays/","title":"overlays","text":"<p>Compile the context from all the overlays.</p>"},{"location":"reference/api/project_forge/context_builder/overlays/#project_forge.context_builder.overlays-classes","title":"Classes","text":""},{"location":"reference/api/project_forge/context_builder/overlays/#project_forge.context_builder.overlays-functions","title":"Functions","text":""},{"location":"reference/api/project_forge/context_builder/overlays/#project_forge.context_builder.overlays.merge_contexts","title":"merge_contexts","text":"<pre><code>merge_contexts(\n    initial_context: MutableMapping,\n    overlay_context: MutableMapping,\n    pattern_context: MutableMapping,\n) -&gt; dict\n</code></pre> <p>Merge contexts together and render the values.</p> <p>The overlay context values will override the pattern context values.</p> PARAMETER DESCRIPTION <code>initial_context</code> <p>The initial context to be updated</p> <p> TYPE: <code>MutableMapping</code> </p> <code>overlay_context</code> <p>The extra context from the overlay</p> <p> TYPE: <code>MutableMapping</code> </p> <code>pattern_context</code> <p>The extra context from the pattern</p> <p> TYPE: <code>MutableMapping</code> </p> RETURNS DESCRIPTION <code>dict</code> <p>The merged and rendered context</p>"},{"location":"reference/api/project_forge/context_builder/overlays/#project_forge.context_builder.overlays.process_overlay","title":"process_overlay","text":"<pre><code>process_overlay(\n    overlay: Overlay,\n    running_context: dict[str, Any],\n    question_ui: Callable,\n) -&gt; dict[str, Any]\n</code></pre> <p>Get the context from an overlay.</p> <ul> <li>update overlay pattern\u2019s extra_context with overlay\u2019s extra_context</li> <li>render extra_context with running_context</li> <li>update running_context with extra_context</li> <li>for each question in pattern     - set response to the result of answer_question     - update running context with response</li> </ul> PARAMETER DESCRIPTION <code>overlay</code> <p>The overlay configuration.</p> <p> TYPE: <code>Overlay</code> </p> <code>running_context</code> <p>The current running context used for rendering defaults, answer mappings, and when conditions.</p> <p> TYPE: <code>dict[str, Any]</code> </p> <code>question_ui</code> <p>A callable that takes question information and returns the result from the user interface.</p> <p> TYPE: <code>Callable</code> </p> RETURNS DESCRIPTION <code>dict[str, Any]</code> <p>A new running context that is the combination of the initial running context, the extra contexts</p> <code>dict[str, Any]</code> <p>from the overlay and pattern, and the answers to the questions.</p>"},{"location":"reference/api/project_forge/context_builder/questions/","title":"questions","text":"<p>Preparation for getting answers for questions.</p>"},{"location":"reference/api/project_forge/context_builder/questions/#project_forge.context_builder.questions-classes","title":"Classes","text":""},{"location":"reference/api/project_forge/context_builder/questions/#project_forge.context_builder.questions-functions","title":"Functions","text":""},{"location":"reference/api/project_forge/context_builder/questions/#project_forge.context_builder.questions.answer_question","title":"answer_question","text":"<pre><code>answer_question(\n    question: Question,\n    running_context: dict,\n    question_ui: Callable,\n    answer_map: Optional[dict] = None,\n    default_overrides: Optional[dict] = None,\n) -&gt; Dict[str, Any]\n</code></pre> <p>Determine the answer to a question.</p> <ul> <li>if question name in overlay\u2019s answer_map     - return answer_map[question_name]</li> <li>Update default with overlay\u2019s default (if it exists)</li> <li>Render default using running_context</li> <li>render <code>force_default</code> using running_context</li> <li>if force_default     - return default</li> <li>else     - return response from send question information to user interface</li> </ul> PARAMETER DESCRIPTION <code>question</code> <p>The question configuration.</p> <p> TYPE: <code>Question</code> </p> <code>running_context</code> <p>The current running context used for rendering defaults, answer mappings, and when conditions.</p> <p> TYPE: <code>dict</code> </p> <code>question_ui</code> <p>A callable that takes question information and returns the result from the user interface.</p> <p> TYPE: <code>Callable</code> </p> <code>answer_map</code> <p>A mapping of question keys to answers.</p> <p> TYPE: <code>Optional[dict]</code> DEFAULT: <code>None</code> </p> <code>default_overrides</code> <p>A mapping of question keys to default values.</p> <p> TYPE: <code>Optional[dict]</code> DEFAULT: <code>None</code> </p> RETURNS DESCRIPTION <code>Dict[str, Any]</code> <p>A dictionary with the question\u2019s name -&gt; value</p>"},{"location":"reference/api/project_forge/context_builder/questions/#project_forge.context_builder.questions.filter_choices","title":"filter_choices","text":"<pre><code>filter_choices(\n    choices: List[Choice], running_context: dict\n) -&gt; dict\n</code></pre> <p>Filter the choices to a question using the running context.</p> <ul> <li>for each choice     - render <code>skip_when</code> using running_context     - if skip_when         - don\u2019t include the choice in the dictionary     - else         - add the label-&gt;value to the dictionary</li> </ul> PARAMETER DESCRIPTION <code>choices</code> <p>A list of choice objects that require filtering</p> <p> TYPE: <code>List[Choice]</code> </p> <code>running_context</code> <p>The context used for rendering skip_when expressions</p> <p> TYPE: <code>dict</code> </p> RETURNS DESCRIPTION <code>dict</code> <p>The dictionary of valid label-&gt;value choices.</p>"},{"location":"reference/api/project_forge/context_builder/tasks/","title":"tasks","text":"<p>Compile the context from task execution.</p>"},{"location":"reference/api/project_forge/context_builder/tasks/#project_forge.context_builder.tasks-classes","title":"Classes","text":""},{"location":"reference/api/project_forge/context_builder/tasks/#project_forge.context_builder.tasks-functions","title":"Functions","text":""},{"location":"reference/api/project_forge/context_builder/tasks/#project_forge.context_builder.tasks.process_task","title":"process_task","text":"<pre><code>process_task(\n    task: Task, running_context: dict[str, Any]\n) -&gt; dict[str, Any]\n</code></pre> <p>Execute a task and return the updated context.</p>"},{"location":"reference/api/project_forge/core/","title":"Index","text":"<p>Core and common code for project-forge.</p>"},{"location":"reference/api/project_forge/core/exceptions/","title":"exceptions","text":"<p>Core exceptions.</p>"},{"location":"reference/api/project_forge/core/exceptions/#project_forge.core.exceptions-classes","title":"Classes","text":""},{"location":"reference/api/project_forge/core/exceptions/#project_forge.core.exceptions.GitError","title":"GitError","text":"<p>               Bases: <code>ProjectForgeError</code></p> <p>There was a problem doing git operations.</p>"},{"location":"reference/api/project_forge/core/exceptions/#project_forge.core.exceptions.PathNotFoundError","title":"PathNotFoundError","text":"<p>               Bases: <code>ProjectForgeError</code></p> <p>The location path was not found.</p>"},{"location":"reference/api/project_forge/core/exceptions/#project_forge.core.exceptions.ProjectForgeError","title":"ProjectForgeError","text":"<p>               Bases: <code>Exception</code></p> <p>Base exception for all Project Forge errors.</p>"},{"location":"reference/api/project_forge/core/exceptions/#project_forge.core.exceptions.RepoAuthError","title":"RepoAuthError","text":"<p>               Bases: <code>ProjectForgeError</code></p> <p>The URL to a repo location gave an authentication error.</p>"},{"location":"reference/api/project_forge/core/exceptions/#project_forge.core.exceptions.RepoNotFoundError","title":"RepoNotFoundError","text":"<p>               Bases: <code>ProjectForgeError</code></p> <p>The URL to a repo location was not found.</p>"},{"location":"reference/api/project_forge/core/io/","title":"io","text":"<p>Input/Output operations.</p>"},{"location":"reference/api/project_forge/core/io/#project_forge.core.io-classes","title":"Classes","text":""},{"location":"reference/api/project_forge/core/io/#project_forge.core.io-functions","title":"Functions","text":""},{"location":"reference/api/project_forge/core/io/#project_forge.core.io.make_sure_path_exists","title":"make_sure_path_exists","text":"<pre><code>make_sure_path_exists(path: os.PathLike[str]) -&gt; None\n</code></pre> <p>Ensure that a directory exists, creating it if it does not.</p> PARAMETER DESCRIPTION <code>path</code> <p>A directory tree path for creation.</p> <p> TYPE: <code>PathLike[str]</code> </p> RAISES DESCRIPTION <code>ProjectForgeError</code> <p>When there is an OSError</p>"},{"location":"reference/api/project_forge/core/io/#project_forge.core.io.parse_file","title":"parse_file","text":"<pre><code>parse_file(path: Union[str, Path]) -&gt; Any\n</code></pre> <p>Read a file and parse its contents.</p> <p>The file\u2019s extension will be used to determine the file type, and the return type.</p> PARAMETER DESCRIPTION <code>path</code> <p>The path to the file to read</p> <p> TYPE: <code>Union[str, Path]</code> </p> RETURNS DESCRIPTION <code>Any</code> <p>A data structure (from YAML, TOML, JSON) or a string.</p>"},{"location":"reference/api/project_forge/core/io/#project_forge.core.io.parse_json","title":"parse_json","text":"<pre><code>parse_json(contents: str) -&gt; Any\n</code></pre> <p>Parse a JSON string into a data structure.</p>"},{"location":"reference/api/project_forge/core/io/#project_forge.core.io.parse_toml","title":"parse_toml","text":"<pre><code>parse_toml(contents: str) -&gt; Any\n</code></pre> <p>Parse a TOML string into a data structure.</p>"},{"location":"reference/api/project_forge/core/io/#project_forge.core.io.parse_yaml","title":"parse_yaml","text":"<pre><code>parse_yaml(contents: str) -&gt; Any\n</code></pre> <p>Parse a YAML string into a data structure.</p>"},{"location":"reference/api/project_forge/core/io/#project_forge.core.io.remove_paths","title":"remove_paths","text":"<pre><code>remove_paths(\n    root: Path, paths_to_remove: Iterable[Path]\n) -&gt; None\n</code></pre> <p>Remove all paths in <code>paths_to_remove</code> from <code>root</code>.</p> <p>Nabbed from Cruft: https://github.com/cruft/cruft/</p> PARAMETER DESCRIPTION <code>root</code> <p>The absolute path of the directory requiring path removal</p> <p> TYPE: <code>Path</code> </p> <code>paths_to_remove</code> <p>The set of relative paths to remove from <code>root</code></p> <p> TYPE: <code>Iterable[Path]</code> </p>"},{"location":"reference/api/project_forge/core/io/#project_forge.core.io.remove_readonly_bit","title":"remove_readonly_bit","text":"<pre><code>remove_readonly_bit(\n    func: Callable[[str], None], path: str, _: Any\n) -&gt; None\n</code></pre> <p>Clear the readonly bit and reattempt the removal.</p>"},{"location":"reference/api/project_forge/core/io/#project_forge.core.io.remove_single_path","title":"remove_single_path","text":"<pre><code>remove_single_path(path: Path) -&gt; None\n</code></pre> <p>Remove a path with extra error handling for Windows.</p> PARAMETER DESCRIPTION <code>path</code> <p>The path to remove</p> <p> TYPE: <code>Path</code> </p> RAISES DESCRIPTION <code>IOError</code> <p>If the file could not be removed</p>"},{"location":"reference/api/project_forge/core/types/","title":"types","text":"<p>Data models core to project forge.</p>"},{"location":"reference/api/project_forge/core/types/#project_forge.core.types-attributes","title":"Attributes","text":""},{"location":"reference/api/project_forge/core/types/#project_forge.core.types.QuestionType","title":"QuestionType  <code>module-attribute</code>","text":"<pre><code>QuestionType = Literal[\n    \"int\",\n    \"float\",\n    \"bool\",\n    \"str\",\n    \"multiline\",\n    \"secret\",\n    \"yaml\",\n    \"json\",\n]\n</code></pre> <p>Possible question types.</p>"},{"location":"reference/api/project_forge/core/types/#project_forge.core.types.TemplateEngine","title":"TemplateEngine  <code>module-attribute</code>","text":"<pre><code>TemplateEngine = Literal['default']\n</code></pre> <p>Supported template engines.</p>"},{"location":"reference/api/project_forge/core/types/#project_forge.core.types.VARIABLE_REGEX","title":"VARIABLE_REGEX  <code>module-attribute</code>","text":"<pre><code>VARIABLE_REGEX = '[a-zA-Z_][\\\\w_]*'\n</code></pre> <p>The regular expression to validate a variable name. Must start with a letter and can contain alphanumeric and underscores.</p>"},{"location":"reference/api/project_forge/core/types/#project_forge.core.types-classes","title":"Classes","text":""},{"location":"reference/api/project_forge/core/types/#project_forge.core.types.BuildResult","title":"BuildResult  <code>dataclass</code>","text":"<pre><code>BuildResult(root_path: Path, context: dict[str, Any])\n</code></pre> <p>The result of a build operation.</p>"},{"location":"reference/api/project_forge/core/types/#project_forge.core.types.BuildResult-attributes","title":"Attributes","text":""},{"location":"reference/api/project_forge/core/types/#project_forge.core.types.BuildResult.context","title":"context  <code>instance-attribute</code>","text":"<pre><code>context: dict[str, Any]\n</code></pre> <p>The rendered context for the project.</p>"},{"location":"reference/api/project_forge/core/types/#project_forge.core.types.BuildResult.root_path","title":"root_path  <code>instance-attribute</code>","text":"<pre><code>root_path: Path\n</code></pre> <p>The path to the rendered project.</p>"},{"location":"reference/api/project_forge/core/types/#project_forge.core.types.UIFunction","title":"UIFunction","text":"<p>               Bases: <code>Protocol</code></p> <p>The function signature for a UI prompt.</p>"},{"location":"reference/api/project_forge/core/types/#project_forge.core.types.UIFunction-functions","title":"Functions","text":""},{"location":"reference/api/project_forge/core/types/#project_forge.core.types.UIFunction.__call__","title":"__call__","text":"<pre><code>__call__(\n    prompt: str,\n    type: QuestionType = \"str\",\n    help: Optional[str] = None,\n    choices: Optional[dict] = None,\n    default: Any = None,\n    multiselect: bool = False,\n    validator_func: Optional[Callable] = None,\n    **kwargs: Any\n) -&gt; Any\n</code></pre> <p>A function that asks the user for input.</p> PARAMETER DESCRIPTION <code>prompt</code> <p>The prompt displayed to the user.</p> <p> TYPE: <code>str</code> </p> <code>type</code> <p>The type of the answer</p> <p> TYPE: <code>QuestionType</code> DEFAULT: <code>'str'</code> </p> <code>help</code> <p>Optional instructions for the user.</p> <p> TYPE: <code>Optional[str]</code> DEFAULT: <code>None</code> </p> <code>choices</code> <p>An optional dictionary of choices</p> <p> TYPE: <code>Optional[dict]</code> DEFAULT: <code>None</code> </p> <code>default</code> <p>The default value.</p> <p> TYPE: <code>Any</code> DEFAULT: <code>None</code> </p> <code>multiselect</code> <p>Can the user select multiple answers?</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>validator_func</code> <p>A callable that takes an answer and returns True if it is valid.</p> <p> TYPE: <code>Optional[Callable]</code> DEFAULT: <code>None</code> </p> <code>**kwargs</code> <p>Additional keyword arguments to pass to the UI function.</p> <p> TYPE: <code>Any</code> DEFAULT: <code>{}</code> </p> RETURNS DESCRIPTION <code>Any</code> <p>The answer to the prompt.</p>"},{"location":"reference/api/project_forge/core/urls/","title":"urls","text":"<p>URL string parsing functions.</p>"},{"location":"reference/api/project_forge/core/urls/#project_forge.core.urls-classes","title":"Classes","text":""},{"location":"reference/api/project_forge/core/urls/#project_forge.core.urls.ParsedURL","title":"ParsedURL  <code>dataclass</code>","text":"<pre><code>ParsedURL(\n    protocol: str = \"\",\n    username: str = \"\",\n    access_token: str = \"\",\n    host: str = \"\",\n    port: str = \"\",\n    full_path: str = \"\",\n    owner: str = \"\",\n    groups_path: str = \"\",\n    repo_name: str = \"\",\n    raw_internal_path: str = \"\",\n    checkout: str = \"\",\n    dot_git: str = \"\",\n)\n</code></pre> <p>A parsed URL for a git repository.</p>"},{"location":"reference/api/project_forge/core/urls/#project_forge.core.urls.ParsedURL-attributes","title":"Attributes","text":""},{"location":"reference/api/project_forge/core/urls/#project_forge.core.urls.ParsedURL.url","title":"url  <code>property</code>","text":"<pre><code>url: str\n</code></pre> <p>Return the normalized URL string.</p>"},{"location":"reference/api/project_forge/core/urls/#project_forge.core.urls.PathInfo","title":"PathInfo","text":"<p>               Bases: <code>TypedDict</code></p> <p>Parsed information about a Path.</p>"},{"location":"reference/api/project_forge/core/urls/#project_forge.core.urls-functions","title":"Functions","text":""},{"location":"reference/api/project_forge/core/urls/#project_forge.core.urls.parse_git_path","title":"parse_git_path","text":"<pre><code>parse_git_path(path: str) -&gt; PathInfo\n</code></pre> <p>Parse the path from a git URL into components.</p>"},{"location":"reference/api/project_forge/core/urls/#project_forge.core.urls.parse_git_url","title":"parse_git_url","text":"<pre><code>parse_git_url(git_url: str) -&gt; ParsedURL\n</code></pre> <p>Parse a URL string into a <code>URL</code> object if it is a valid URL.</p>"},{"location":"reference/api/project_forge/core/urls/#project_forge.core.urls.parse_internal_path","title":"parse_internal_path","text":"<pre><code>parse_internal_path(path: str) -&gt; Dict[str, str]\n</code></pre> <p>Parse the internal path into internal_path and checkout components.</p>"},{"location":"reference/api/project_forge/core/validators/","title":"validators","text":"<p>Answer validators.</p>"},{"location":"reference/api/project_forge/core/validators/#project_forge.core.validators-classes","title":"Classes","text":""},{"location":"reference/api/project_forge/core/validators/#project_forge.core.validators.ExprValidator","title":"ExprValidator","text":"<pre><code>ExprValidator(expr: str = '')\n</code></pre> <p>A callable that will validate input by rendering an expression.</p>"},{"location":"reference/api/project_forge/core/validators/#project_forge.core.validators.ExprValidator-functions","title":"Functions","text":""},{"location":"reference/api/project_forge/core/validators/#project_forge.core.validators.ExprValidator.__call__","title":"__call__","text":"<pre><code>__call__(value: T) -&gt; T\n</code></pre> <p>Validate the input.</p> PARAMETER DESCRIPTION <code>value</code> <p>The value to validate.</p> <p> TYPE: <code>T</code> </p> RETURNS DESCRIPTION <code>T</code> <p>The value if the expression returns nothing.</p> RAISES DESCRIPTION <code>ValueError</code> <p>If the expression returns a value. The message of the ValueError is the rendered expression.</p>"},{"location":"reference/api/project_forge/core/validators/#project_forge.core.validators-functions","title":"Functions","text":""},{"location":"reference/api/project_forge/core/validators/#project_forge.core.validators.is_bool","title":"is_bool","text":"<pre><code>is_bool(value: Any) -&gt; bool\n</code></pre> <p>Is the value a boolean or convertible to a boolean?</p>"},{"location":"reference/api/project_forge/core/validators/#project_forge.core.validators.is_float","title":"is_float","text":"<pre><code>is_float(value: Any) -&gt; bool\n</code></pre> <p>Is the value a float or convertible to a float?</p>"},{"location":"reference/api/project_forge/core/validators/#project_forge.core.validators.is_int","title":"is_int","text":"<pre><code>is_int(value: Any) -&gt; bool\n</code></pre> <p>Is the value an int or convertible to an int?</p>"},{"location":"reference/api/project_forge/models/","title":"Index","text":"<p>Data models used to validate and store data.</p>"},{"location":"reference/api/project_forge/models/composition/","title":"composition","text":"<p>Data models for configurations.</p>"},{"location":"reference/api/project_forge/models/composition/#project_forge.models.composition-classes","title":"Classes","text":""},{"location":"reference/api/project_forge/models/composition/#project_forge.models.composition.Composition","title":"Composition  <code>pydantic-model</code>","text":"<p>               Bases: <code>BaseModel</code></p> <p>The settings for a composition.</p> Show JSON schema: <pre><code>{\n  \"$defs\": {\n    \"Location\": {\n      \"description\": \"The location of a file or directory.\\n\\nA location supports referencing the file or directory using:\\n\\n- relative path\\n- absolute path\\n- git URL\\n- git URL plus revision/tag/branch plus path in the repo\\n\\nWhen `url` is specified, the `path` is relative to the root of the repository.\\n\\nAt least one of `path` or `url` must be specified.\",\n      \"properties\": {\n        \"path\": {\n          \"anyOf\": [\n            {\n              \"type\": \"string\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"description\": \"The relative or absolute path to the location.\",\n          \"title\": \"Path\"\n        },\n        \"url\": {\n          \"anyOf\": [\n            {\n              \"type\": \"string\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"description\": \"The Git URL to the location.\",\n          \"title\": \"Url\"\n        }\n      },\n      \"title\": \"Location\",\n      \"type\": \"object\"\n    },\n    \"Overlay\": {\n      \"description\": \"An object describing how to overlay a pattern in a composition.\",\n      \"properties\": {\n        \"pattern_location\": {\n          \"anyOf\": [\n            {\n              \"type\": \"string\"\n            },\n            {\n              \"$ref\": \"#/$defs/Location\"\n            }\n          ],\n          \"description\": \"The location of the pattern file for this overlay.\",\n          \"title\": \"Pattern Location\"\n        },\n        \"ask_questions\": {\n          \"default\": true,\n          \"description\": \"Ask the user this pattern's questions? When false, the defaults are used.\",\n          \"title\": \"Ask Questions\",\n          \"type\": \"boolean\"\n        },\n        \"defaults\": {\n          \"description\": \"Override one or more question's default values in this pattern. Values can be a template string.\",\n          \"title\": \"Defaults\",\n          \"type\": \"object\"\n        },\n        \"extra_context\": {\n          \"description\": \"Override one or more keys in this pattern's `extra_context`. Values can be a template string.\",\n          \"title\": \"Extra Context\",\n          \"type\": \"object\"\n        },\n        \"answer_map\": {\n          \"description\": \"This signifies that a previous overlay has already answered one or more of this pattern's questions. The key is this pattern's question name and the value is a template string that references or modifies a previous pattern's question name.\",\n          \"title\": \"Answer Map\",\n          \"type\": \"object\"\n        },\n        \"overwrite_files\": {\n          \"description\": \"A list of paths or glob patterns of files that may be overwritten. An empty list means do not overwrite any files.\",\n          \"items\": {\n            \"type\": \"string\"\n          },\n          \"title\": \"Overwrite Files\",\n          \"type\": \"array\"\n        },\n        \"exclude_files\": {\n          \"description\": \"A list of paths or glob patterns of files to exclude from the generation (overrides the pattern's configuration)\",\n          \"items\": {\n            \"type\": \"string\"\n          },\n          \"title\": \"Exclude Files\",\n          \"type\": \"array\"\n        }\n      },\n      \"required\": [\n        \"pattern_location\"\n      ],\n      \"title\": \"Overlay\",\n      \"type\": \"object\"\n    },\n    \"Task\": {\n      \"description\": \"A task to run while rendering a composition.\",\n      \"properties\": {\n        \"command\": {\n          \"anyOf\": [\n            {\n              \"type\": \"string\"\n            },\n            {\n              \"items\": {\n                \"type\": \"string\"\n              },\n              \"type\": \"array\"\n            }\n          ],\n          \"description\": \"The command to run.\",\n          \"title\": \"Command\"\n        },\n        \"use_shell\": {\n          \"default\": false,\n          \"description\": \"Whether to run the command in a shell.\\n\\nIf `command` is a str, this is always `True`.\",\n          \"title\": \"Use Shell\",\n          \"type\": \"boolean\"\n        },\n        \"env\": {\n          \"anyOf\": [\n            {\n              \"additionalProperties\": {\n                \"type\": \"string\"\n              },\n              \"type\": \"object\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"description\": \"Environment variables to set when running the command.\\n\\nEach environment variable value may be a template string rendered using the context so far.\",\n          \"title\": \"Env\"\n        },\n        \"when\": {\n          \"anyOf\": [\n            {\n              \"type\": \"string\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"description\": \"A template string that will render as `True` if the task should run.\",\n          \"title\": \"When\"\n        },\n        \"context_variable_name\": {\n          \"anyOf\": [\n            {\n              \"type\": \"string\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"description\": \"The name of a context variable that will be set to the command's stdout. If not provided, the the output is not saved to the context.\",\n          \"title\": \"Context Variable Name\"\n        }\n      },\n      \"required\": [\n        \"command\"\n      ],\n      \"title\": \"Task\",\n      \"type\": \"object\"\n    }\n  },\n  \"description\": \"The settings for a composition.\",\n  \"properties\": {\n    \"steps\": {\n      \"description\": \"A list of pattern overlays and tasks to compose.\",\n      \"items\": {\n        \"anyOf\": [\n          {\n            \"$ref\": \"#/$defs/Overlay\"\n          },\n          {\n            \"$ref\": \"#/$defs/Task\"\n          }\n        ]\n      },\n      \"title\": \"Steps\",\n      \"type\": \"array\"\n    },\n    \"merge_keys\": {\n      \"additionalProperties\": {\n        \"enum\": [\n          \"overwrite\",\n          \"comprehensive\"\n        ],\n        \"type\": \"string\"\n      },\n      \"description\": \"Merge the values of one or more keys in a specific way. This is useful for `yaml` or `json` values. Valid merge methods are `overwrite`, `nested-overwrite`, and `comprehensive`.\",\n      \"title\": \"Merge Keys\",\n      \"type\": \"object\"\n    },\n    \"extra_context\": {\n      \"description\": \"Override one or more keys in this pattern's `extra_context`. Values can be a template string.\",\n      \"title\": \"Extra Context\",\n      \"type\": \"object\"\n    }\n  },\n  \"title\": \"Composition\",\n  \"type\": \"object\"\n}\n</code></pre> <p>Fields:</p> <ul> <li> <code>steps</code>                 (<code>List[Overlay | Task]</code>)             </li> <li> <code>merge_keys</code>                 (<code>Dict[str, MergeMethods]</code>)             </li> <li> <code>extra_context</code>                 (<code>dict</code>)             </li> </ul>"},{"location":"reference/api/project_forge/models/composition/#project_forge.models.composition.Composition-attributes","title":"Attributes","text":""},{"location":"reference/api/project_forge/models/composition/#project_forge.models.composition.Composition.extra_context","title":"extra_context  <code>pydantic-field</code>","text":"<pre><code>extra_context: dict\n</code></pre> <p>Override one or more keys in this pattern\u2019s <code>extra_context</code>. Values can be a template string.</p>"},{"location":"reference/api/project_forge/models/composition/#project_forge.models.composition.Composition.merge_keys","title":"merge_keys  <code>pydantic-field</code>","text":"<pre><code>merge_keys: Dict[str, MergeMethods]\n</code></pre> <p>Merge the values of one or more keys in a specific way. This is useful for <code>yaml</code> or <code>json</code> values. Valid merge methods are <code>overwrite</code>, <code>nested-overwrite</code>, and <code>comprehensive</code>.</p>"},{"location":"reference/api/project_forge/models/composition/#project_forge.models.composition.Composition.steps","title":"steps  <code>pydantic-field</code>","text":"<pre><code>steps: List[Overlay | Task]\n</code></pre> <p>A list of pattern overlays and tasks to compose.</p>"},{"location":"reference/api/project_forge/models/composition/#project_forge.models.composition.Composition-functions","title":"Functions","text":""},{"location":"reference/api/project_forge/models/composition/#project_forge.models.composition.Composition.cache_data","title":"cache_data","text":"<pre><code>cache_data() -&gt; None\n</code></pre> <p>Makes sure all the patterns are cached and have their pattern objects loaded.</p> <p>Accessing the <code>pattern</code> property on an overlay will lazily load the pattern.</p>"},{"location":"reference/api/project_forge/models/composition/#project_forge.models.composition.Composition.from_location","title":"from_location  <code>classmethod</code>","text":"<pre><code>from_location(\n    location: Union[str, Location]\n) -&gt; Composition\n</code></pre> <p>Convert the location to a pattern into a composition.</p>"},{"location":"reference/api/project_forge/models/composition/#project_forge.models.composition-functions","title":"Functions","text":""},{"location":"reference/api/project_forge/models/composition/#project_forge.models.composition.is_composition_data","title":"is_composition_data","text":"<pre><code>is_composition_data(data: dict) -&gt; bool\n</code></pre> <p>Returns True if the data is for a composition, otherwise False.</p>"},{"location":"reference/api/project_forge/models/composition/#project_forge.models.composition.read_composition_file","title":"read_composition_file","text":"<pre><code>read_composition_file(\n    path: Union[str, Path]\n) -&gt; Composition\n</code></pre> <p>Read, parse, and validate the contents of a composition file and patterns.</p> <p>If the path is to a pattern file, it is added to a composition and returned.</p> PARAMETER DESCRIPTION <code>path</code> <p>The path to the composition or pattern file</p> <p> TYPE: <code>Union[str, Path]</code> </p> RETURNS DESCRIPTION <code>Composition</code> <p>A resolved and validated composition object.</p>"},{"location":"reference/api/project_forge/models/location/","title":"location","text":"<p>Models core to the project forge package.</p>"},{"location":"reference/api/project_forge/models/location/#project_forge.models.location-classes","title":"Classes","text":""},{"location":"reference/api/project_forge/models/location/#project_forge.models.location.Location","title":"Location  <code>pydantic-model</code>","text":"<p>               Bases: <code>BaseModel</code></p> <p>The location of a file or directory.</p> <p>A location supports referencing the file or directory using:</p> <ul> <li>relative path</li> <li>absolute path</li> <li>git URL</li> <li>git URL plus revision/tag/branch plus path in the repo</li> </ul> <p>When <code>url</code> is specified, the <code>path</code> is relative to the root of the repository.</p> <p>At least one of <code>path</code> or <code>url</code> must be specified.</p> Show JSON schema: <pre><code>{\n  \"description\": \"The location of a file or directory.\\n\\nA location supports referencing the file or directory using:\\n\\n- relative path\\n- absolute path\\n- git URL\\n- git URL plus revision/tag/branch plus path in the repo\\n\\nWhen `url` is specified, the `path` is relative to the root of the repository.\\n\\nAt least one of `path` or `url` must be specified.\",\n  \"properties\": {\n    \"path\": {\n      \"anyOf\": [\n        {\n          \"type\": \"string\"\n        },\n        {\n          \"type\": \"null\"\n        }\n      ],\n      \"default\": null,\n      \"description\": \"The relative or absolute path to the location.\",\n      \"title\": \"Path\"\n    },\n    \"url\": {\n      \"anyOf\": [\n        {\n          \"type\": \"string\"\n        },\n        {\n          \"type\": \"null\"\n        }\n      ],\n      \"default\": null,\n      \"description\": \"The Git URL to the location.\",\n      \"title\": \"Url\"\n    }\n  },\n  \"title\": \"Location\",\n  \"type\": \"object\"\n}\n</code></pre> <p>Fields:</p> <ul> <li> <code>path</code>                 (<code>Optional[str]</code>)             </li> <li> <code>url</code>                 (<code>Optional[str]</code>)             </li> <li> <code>_resolved_path</code>                 (<code>Optional[Path]</code>)             </li> <li> <code>_parsed_url</code>                 (<code>Optional[ParsedURL]</code>)             </li> <li> <code>parsed_url</code>                 (<code>Optional[ParsedURL]</code>)             </li> </ul> <p>Validators:</p> <ul> <li> <code>_process_url</code> </li> <li> <code>_ensure_path_or_url</code> </li> </ul>"},{"location":"reference/api/project_forge/models/location/#project_forge.models.location.Location-attributes","title":"Attributes","text":""},{"location":"reference/api/project_forge/models/location/#project_forge.models.location.Location.parsed_url","title":"parsed_url  <code>pydantic-field</code>","text":"<pre><code>parsed_url: Optional[ParsedURL]\n</code></pre> <p>Parse the URL and cache it.</p>"},{"location":"reference/api/project_forge/models/location/#project_forge.models.location.Location.path","title":"path  <code>pydantic-field</code>","text":"<pre><code>path: Optional[str] = None\n</code></pre> <p>The relative or absolute path to the location.</p>"},{"location":"reference/api/project_forge/models/location/#project_forge.models.location.Location.url","title":"url  <code>pydantic-field</code>","text":"<pre><code>url: Optional[str] = None\n</code></pre> <p>The Git URL to the location.</p>"},{"location":"reference/api/project_forge/models/location/#project_forge.models.location.Location-functions","title":"Functions","text":""},{"location":"reference/api/project_forge/models/location/#project_forge.models.location.Location.__eq__","title":"__eq__","text":"<pre><code>__eq__(other: object) -&gt; bool\n</code></pre> <p>Compare if the objects are the same.</p> <p>This ignores the private attribute <code>_resolved_path</code>. The locations are equal regardless if the <code>resolve</code> method was previously called.</p> PARAMETER DESCRIPTION <code>other</code> <p>The other object to compare to.</p> <p> TYPE: <code>object</code> </p> RETURNS DESCRIPTION <code>bool</code> <p>True if the objects are the same, False otherwise.</p>"},{"location":"reference/api/project_forge/models/location/#project_forge.models.location.Location.from_string","title":"from_string  <code>classmethod</code>","text":"<pre><code>from_string(location: str) -&gt; Location\n</code></pre> <p>Convert a path or URL string into a location.</p>"},{"location":"reference/api/project_forge/models/location/#project_forge.models.location.Location.resolve","title":"resolve","text":"<pre><code>resolve(root_path: Optional[Path] = None) -&gt; Path\n</code></pre> <p>Find the proper template path for a pattern.</p> <ul> <li>A relative <code>path</code> is relative to the root path and must exist.</li> <li>An absolute <code>path</code> must exist.</li> <li>A URL must be to a git repository and a <code>path</code> must exist within the repository.</li> </ul> PARAMETER DESCRIPTION <code>root_path</code> <p>The path to use for resolving relative <code>path</code>s if there is no <code>url</code>. The current working directory is used if None.</p> <p> TYPE: <code>Optional[Path]</code> DEFAULT: <code>None</code> </p> RAISES DESCRIPTION <code>RepoNotFound</code> <p>If the URL provided returns a 404 error</p> <code>RepoAuthError</code> <p>If the URL provided returns a 401 or 403 error</p> <code>PathNotFound</code> <p>If the path was not found</p> RETURNS DESCRIPTION <code>Path</code> <p>The path to the location</p>"},{"location":"reference/api/project_forge/models/location/#project_forge.models.location-functions","title":"Functions","text":""},{"location":"reference/api/project_forge/models/location/#project_forge.models.location.make_absolute","title":"make_absolute","text":"<pre><code>make_absolute(\n    path: Union[str, Path], root_path: Optional[Path] = None\n) -&gt; Path\n</code></pre> <p>Convert relative paths to absolute paths, and return absolute paths unchanged.</p> PARAMETER DESCRIPTION <code>path</code> <p>The path to convert.</p> <p> TYPE: <code>Union[str, Path]</code> </p> <code>root_path</code> <p>The root path to resolve relative paths against.</p> <p> TYPE: <code>Optional[Path]</code> DEFAULT: <code>None</code> </p> RETURNS DESCRIPTION <code>Path</code> <p>An absolute path.</p>"},{"location":"reference/api/project_forge/models/location/#project_forge.models.location.resolve_url_location","title":"resolve_url_location","text":"<pre><code>resolve_url_location(location: Location) -&gt; Path\n</code></pre> <p>Cache the URL and return the Path to the resolved location.</p> <p>This downloads the repo into a cache and returns the full path to the template dir.</p> PARAMETER DESCRIPTION <code>location</code> <p>The location object with a parsed URL</p> <p> TYPE: <code>Location</code> </p> RAISES DESCRIPTION <code>RepoNotFound</code> <p>If the URL provided returns a 404 error</p> <code>RepoAuthError</code> <p>If the URL provided returns a 401 or 403 error</p> <code>PathNotFound</code> <p>If the path was not found</p> RETURNS DESCRIPTION <code>Path</code> <p>Path to the template dir</p>"},{"location":"reference/api/project_forge/models/overlay/","title":"overlay","text":"<p>An object describing how to apply a pattern to a composition.</p>"},{"location":"reference/api/project_forge/models/overlay/#project_forge.models.overlay-classes","title":"Classes","text":""},{"location":"reference/api/project_forge/models/overlay/#project_forge.models.overlay.Overlay","title":"Overlay  <code>pydantic-model</code>","text":"<p>               Bases: <code>BaseModel</code></p> <p>An object describing how to overlay a pattern in a composition.</p> Show JSON schema: <pre><code>{\n  \"$defs\": {\n    \"Location\": {\n      \"description\": \"The location of a file or directory.\\n\\nA location supports referencing the file or directory using:\\n\\n- relative path\\n- absolute path\\n- git URL\\n- git URL plus revision/tag/branch plus path in the repo\\n\\nWhen `url` is specified, the `path` is relative to the root of the repository.\\n\\nAt least one of `path` or `url` must be specified.\",\n      \"properties\": {\n        \"path\": {\n          \"anyOf\": [\n            {\n              \"type\": \"string\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"description\": \"The relative or absolute path to the location.\",\n          \"title\": \"Path\"\n        },\n        \"url\": {\n          \"anyOf\": [\n            {\n              \"type\": \"string\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"description\": \"The Git URL to the location.\",\n          \"title\": \"Url\"\n        }\n      },\n      \"title\": \"Location\",\n      \"type\": \"object\"\n    }\n  },\n  \"description\": \"An object describing how to overlay a pattern in a composition.\",\n  \"properties\": {\n    \"pattern_location\": {\n      \"anyOf\": [\n        {\n          \"type\": \"string\"\n        },\n        {\n          \"$ref\": \"#/$defs/Location\"\n        }\n      ],\n      \"description\": \"The location of the pattern file for this overlay.\",\n      \"title\": \"Pattern Location\"\n    },\n    \"ask_questions\": {\n      \"default\": true,\n      \"description\": \"Ask the user this pattern's questions? When false, the defaults are used.\",\n      \"title\": \"Ask Questions\",\n      \"type\": \"boolean\"\n    },\n    \"defaults\": {\n      \"description\": \"Override one or more question's default values in this pattern. Values can be a template string.\",\n      \"title\": \"Defaults\",\n      \"type\": \"object\"\n    },\n    \"extra_context\": {\n      \"description\": \"Override one or more keys in this pattern's `extra_context`. Values can be a template string.\",\n      \"title\": \"Extra Context\",\n      \"type\": \"object\"\n    },\n    \"answer_map\": {\n      \"description\": \"This signifies that a previous overlay has already answered one or more of this pattern's questions. The key is this pattern's question name and the value is a template string that references or modifies a previous pattern's question name.\",\n      \"title\": \"Answer Map\",\n      \"type\": \"object\"\n    },\n    \"overwrite_files\": {\n      \"description\": \"A list of paths or glob patterns of files that may be overwritten. An empty list means do not overwrite any files.\",\n      \"items\": {\n        \"type\": \"string\"\n      },\n      \"title\": \"Overwrite Files\",\n      \"type\": \"array\"\n    },\n    \"exclude_files\": {\n      \"description\": \"A list of paths or glob patterns of files to exclude from the generation (overrides the pattern's configuration)\",\n      \"items\": {\n        \"type\": \"string\"\n      },\n      \"title\": \"Exclude Files\",\n      \"type\": \"array\"\n    }\n  },\n  \"required\": [\n    \"pattern_location\"\n  ],\n  \"title\": \"Overlay\",\n  \"type\": \"object\"\n}\n</code></pre> <p>Fields:</p> <ul> <li> <code>pattern_location</code>                 (<code>Union[str, Location]</code>)             </li> <li> <code>_pattern</code>                 (<code>Optional[Pattern]</code>)             </li> <li> <code>ask_questions</code>                 (<code>bool</code>)             </li> <li> <code>defaults</code>                 (<code>dict</code>)             </li> <li> <code>extra_context</code>                 (<code>dict</code>)             </li> <li> <code>answer_map</code>                 (<code>dict</code>)             </li> <li> <code>overwrite_files</code>                 (<code>List[str]</code>)             </li> <li> <code>exclude_files</code>                 (<code>List[str]</code>)             </li> <li> <code>pattern</code>                 (<code>Pattern</code>)             </li> </ul> <p>Validators:</p> <ul> <li> <code>validate_pattern_location</code>                 \u2192                   <code>pattern_location</code> </li> </ul>"},{"location":"reference/api/project_forge/models/overlay/#project_forge.models.overlay.Overlay-attributes","title":"Attributes","text":""},{"location":"reference/api/project_forge/models/overlay/#project_forge.models.overlay.Overlay.answer_map","title":"answer_map  <code>pydantic-field</code>","text":"<pre><code>answer_map: dict\n</code></pre> <p>This signifies that a previous overlay has already answered one or more of this pattern\u2019s questions. The key is this pattern\u2019s question name and the value is a template string that references or modifies a previous pattern\u2019s question name.</p>"},{"location":"reference/api/project_forge/models/overlay/#project_forge.models.overlay.Overlay.ask_questions","title":"ask_questions  <code>pydantic-field</code>","text":"<pre><code>ask_questions: bool = True\n</code></pre> <p>Ask the user this pattern\u2019s questions? When false, the defaults are used.</p>"},{"location":"reference/api/project_forge/models/overlay/#project_forge.models.overlay.Overlay.defaults","title":"defaults  <code>pydantic-field</code>","text":"<pre><code>defaults: dict\n</code></pre> <p>Override one or more question\u2019s default values in this pattern. Values can be a template string.</p>"},{"location":"reference/api/project_forge/models/overlay/#project_forge.models.overlay.Overlay.exclude_files","title":"exclude_files  <code>pydantic-field</code>","text":"<pre><code>exclude_files: List[str]\n</code></pre> <p>A list of paths or glob patterns of files to exclude from the generation (overrides the pattern\u2019s configuration)</p>"},{"location":"reference/api/project_forge/models/overlay/#project_forge.models.overlay.Overlay.extra_context","title":"extra_context  <code>pydantic-field</code>","text":"<pre><code>extra_context: dict\n</code></pre> <p>Override one or more keys in this pattern\u2019s <code>extra_context</code>. Values can be a template string.</p>"},{"location":"reference/api/project_forge/models/overlay/#project_forge.models.overlay.Overlay.overwrite_files","title":"overwrite_files  <code>pydantic-field</code>","text":"<pre><code>overwrite_files: List[str]\n</code></pre> <p>A list of paths or glob patterns of files that may be overwritten. An empty list means do not overwrite any files.</p>"},{"location":"reference/api/project_forge/models/overlay/#project_forge.models.overlay.Overlay.pattern","title":"pattern  <code>pydantic-field</code>","text":"<pre><code>pattern: Pattern\n</code></pre> <p>Lazy loading of the pattern from its location.</p>"},{"location":"reference/api/project_forge/models/overlay/#project_forge.models.overlay.Overlay.pattern_location","title":"pattern_location  <code>pydantic-field</code>","text":"<pre><code>pattern_location: Union[str, Location]\n</code></pre> <p>The location of the pattern file for this overlay.</p>"},{"location":"reference/api/project_forge/models/overlay/#project_forge.models.overlay.Overlay-functions","title":"Functions","text":""},{"location":"reference/api/project_forge/models/overlay/#project_forge.models.overlay.Overlay.validate_pattern_location","title":"validate_pattern_location  <code>pydantic-validator</code>","text":"<pre><code>validate_pattern_location(\n    value: Union[str, Location], info: ValidationInfo\n) -&gt; Location\n</code></pre> <p>Check that the pattern_location exists.</p>"},{"location":"reference/api/project_forge/models/overlay/#project_forge.models.overlay-functions","title":"Functions","text":""},{"location":"reference/api/project_forge/models/pattern/","title":"pattern","text":"<p>Model definitions relating to Pattern configurations.</p> <p>A pattern consists of a set of template files and a configuration file. The configuration file defines the context required to render the template and the rendering rules.</p> <p>Patterns are meant to be focused and reusable. Patterns are combined with other patterns using a composition.</p> <p>Patterns are renderable as-is. They do not need to be a part of a composition.</p>"},{"location":"reference/api/project_forge/models/pattern/#project_forge.models.pattern-attributes","title":"Attributes","text":""},{"location":"reference/api/project_forge/models/pattern/#project_forge.models.pattern-classes","title":"Classes","text":""},{"location":"reference/api/project_forge/models/pattern/#project_forge.models.pattern.Choice","title":"Choice  <code>pydantic-model</code>","text":"<p>               Bases: <code>BaseModel</code></p> <p>A choice to a Question.</p> Show JSON schema: <pre><code>{\n  \"description\": \"A choice to a Question.\",\n  \"properties\": {\n    \"label\": {\n      \"description\": \"The label for this choice when prompted to the user.\",\n      \"pattern\": \"[a-zA-Z_][\\\\w_]*\",\n      \"title\": \"Label\",\n      \"type\": \"string\"\n    },\n    \"value\": {\n      \"anyOf\": [\n        {\n          \"type\": \"string\"\n        },\n        {\n          \"type\": \"integer\"\n        },\n        {\n          \"type\": \"number\"\n        },\n        {\n          \"type\": \"boolean\"\n        },\n        {\n          \"type\": \"null\"\n        }\n      ],\n      \"description\": \"The value used when this choice is selected. It should match the questions's type.\",\n      \"title\": \"Value\"\n    },\n    \"skip_when\": {\n      \"default\": \"\",\n      \"description\": \"A template string that will render as `True` if the choice is not valid based on previous context values.\\n\\nTake care to have at least one option without a `skip_when` clause to avoid accidentally creating a situation with no valid choices.\",\n      \"title\": \"Skip When\",\n      \"type\": \"string\"\n    }\n  },\n  \"required\": [\n    \"label\",\n    \"value\"\n  ],\n  \"title\": \"Choice\",\n  \"type\": \"object\"\n}\n</code></pre> <p>Fields:</p> <ul> <li> <code>label</code>                 (<code>str</code>)             </li> <li> <code>value</code>                 (<code>ScalarType</code>)             </li> <li> <code>skip_when</code>                 (<code>str</code>)             </li> </ul> <p>Validators:</p> <ul> <li> <code>convert_scalar_to_choice</code> </li> </ul>"},{"location":"reference/api/project_forge/models/pattern/#project_forge.models.pattern.Choice-attributes","title":"Attributes","text":""},{"location":"reference/api/project_forge/models/pattern/#project_forge.models.pattern.Choice.label","title":"label  <code>pydantic-field</code>","text":"<pre><code>label: str\n</code></pre> <p>The label for this choice when prompted to the user.</p>"},{"location":"reference/api/project_forge/models/pattern/#project_forge.models.pattern.Choice.skip_when","title":"skip_when  <code>pydantic-field</code>","text":"<pre><code>skip_when: str = ''\n</code></pre> <p>A template string that will render as <code>True</code> if the choice is not valid based on previous context values.</p> <p>Take care to have at least one option without a <code>skip_when</code> clause to avoid accidentally creating a situation with no valid choices.</p>"},{"location":"reference/api/project_forge/models/pattern/#project_forge.models.pattern.Choice.value","title":"value  <code>pydantic-field</code>","text":"<pre><code>value: ScalarType\n</code></pre> <p>The value used when this choice is selected. It should match the questions\u2019s type.</p>"},{"location":"reference/api/project_forge/models/pattern/#project_forge.models.pattern.Choice-functions","title":"Functions","text":""},{"location":"reference/api/project_forge/models/pattern/#project_forge.models.pattern.Choice.convert_scalar_to_choice","title":"convert_scalar_to_choice  <code>pydantic-validator</code>","text":"<pre><code>convert_scalar_to_choice(value: Any) -&gt; Any\n</code></pre> <p>Convert a scalar value to a Choice object.</p>"},{"location":"reference/api/project_forge/models/pattern/#project_forge.models.pattern.Pattern","title":"Pattern  <code>pydantic-model</code>","text":"<p>               Bases: <code>BaseModel</code></p> <p>The configuration of a pattern.</p> Show JSON schema: <pre><code>{\n  \"$defs\": {\n    \"Choice\": {\n      \"description\": \"A choice to a Question.\",\n      \"properties\": {\n        \"label\": {\n          \"description\": \"The label for this choice when prompted to the user.\",\n          \"pattern\": \"[a-zA-Z_][\\\\w_]*\",\n          \"title\": \"Label\",\n          \"type\": \"string\"\n        },\n        \"value\": {\n          \"anyOf\": [\n            {\n              \"type\": \"string\"\n            },\n            {\n              \"type\": \"integer\"\n            },\n            {\n              \"type\": \"number\"\n            },\n            {\n              \"type\": \"boolean\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"description\": \"The value used when this choice is selected. It should match the questions's type.\",\n          \"title\": \"Value\"\n        },\n        \"skip_when\": {\n          \"default\": \"\",\n          \"description\": \"A template string that will render as `True` if the choice is not valid based on previous context values.\\n\\nTake care to have at least one option without a `skip_when` clause to avoid accidentally creating a situation with no valid choices.\",\n          \"title\": \"Skip When\",\n          \"type\": \"string\"\n        }\n      },\n      \"required\": [\n        \"label\",\n        \"value\"\n      ],\n      \"title\": \"Choice\",\n      \"type\": \"object\"\n    },\n    \"Location\": {\n      \"description\": \"The location of a file or directory.\\n\\nA location supports referencing the file or directory using:\\n\\n- relative path\\n- absolute path\\n- git URL\\n- git URL plus revision/tag/branch plus path in the repo\\n\\nWhen `url` is specified, the `path` is relative to the root of the repository.\\n\\nAt least one of `path` or `url` must be specified.\",\n      \"properties\": {\n        \"path\": {\n          \"anyOf\": [\n            {\n              \"type\": \"string\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"description\": \"The relative or absolute path to the location.\",\n          \"title\": \"Path\"\n        },\n        \"url\": {\n          \"anyOf\": [\n            {\n              \"type\": \"string\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"description\": \"The Git URL to the location.\",\n          \"title\": \"Url\"\n        }\n      },\n      \"title\": \"Location\",\n      \"type\": \"object\"\n    },\n    \"Question\": {\n      \"description\": \"A question for a pattern.\",\n      \"properties\": {\n        \"name\": {\n          \"description\": \"The name of the variable used in the template.\",\n          \"pattern\": \"[a-zA-Z_][\\\\w_]*\",\n          \"title\": \"Name\",\n          \"type\": \"string\"\n        },\n        \"type\": {\n          \"default\": \"str\",\n          \"description\": \"The type of this variable.\",\n          \"enum\": [\n            \"int\",\n            \"float\",\n            \"bool\",\n            \"str\",\n            \"multiline\",\n            \"secret\",\n            \"yaml\",\n            \"json\"\n          ],\n          \"title\": \"Type\",\n          \"type\": \"string\"\n        },\n        \"prompt\": {\n          \"default\": \"\",\n          \"description\": \"The message to ask the user for this information. If no prompt is provided, 'What is the &lt;name&gt;?' is used.\",\n          \"title\": \"Prompt\",\n          \"type\": \"string\"\n        },\n        \"help\": {\n          \"default\": \"\",\n          \"description\": \"Additional information to explain how to answer this question.\",\n          \"title\": \"Help\",\n          \"type\": \"string\"\n        },\n        \"choices\": {\n          \"description\": \"A list of choice values or `choice` objects\",\n          \"items\": {\n            \"$ref\": \"#/$defs/Choice\"\n          },\n          \"title\": \"Choices\",\n          \"type\": \"array\"\n        },\n        \"multiselect\": {\n          \"default\": false,\n          \"description\": \"When `true` allow multiple selections. The type of this context element will then be a list of this question's `type`\",\n          \"title\": \"Multiselect\",\n          \"type\": \"boolean\"\n        },\n        \"default\": {\n          \"default\": null,\n          \"description\": \"Provide a default to save them from typing. \\n\\nWhen using `choices`, the default must be the choice _value_, not its _key_, and must match its _type_. Leave this empty to force the user to answer.\\n\\nThis value may also be a template string rendered using the context so far. This allows you to provide defaults based on previous context elements.\",\n          \"title\": \"Default\"\n        },\n        \"validator\": {\n          \"default\": \"\",\n          \"description\": \"Template string to validate the user input. \\n\\nThis template is rendered using the context so far; it should render _nothing_ if the value is valid and an error message to show to the user otherwise.\",\n          \"title\": \"Validator\",\n          \"type\": \"string\"\n        },\n        \"force_default\": {\n          \"anyOf\": [\n            {\n              \"type\": \"string\"\n            },\n            {\n              \"type\": \"boolean\"\n            }\n          ],\n          \"default\": false,\n          \"description\": \"A condition that, if `True`, will not prompt the user for a value and uses the `default`.\\n\\n`bool` values are used directly. Setting this to `True` is a good way to make this value a computed value.\\n\\n`str` values should be template strings that evaluate to a boolean value.\",\n          \"title\": \"Force Default\"\n        }\n      },\n      \"required\": [\n        \"name\"\n      ],\n      \"title\": \"Question\",\n      \"type\": \"object\"\n    }\n  },\n  \"description\": \"The configuration of a pattern.\",\n  \"properties\": {\n    \"questions\": {\n      \"description\": \"A list of question objects that define the available context variables for project generation.\",\n      \"items\": {\n        \"$ref\": \"#/$defs/Question\"\n      },\n      \"title\": \"Questions\",\n      \"type\": \"array\"\n    },\n    \"template_location\": {\n      \"$ref\": \"#/$defs/Location\",\n      \"description\": \"The location of the root directory of the templates. This directory's name will be rendered using the context. \"\n    },\n    \"extra_context\": {\n      \"description\": \"Static Key-Values. Values may be template strings.\",\n      \"title\": \"Extra Context\",\n      \"type\": \"object\"\n    },\n    \"template_engine\": {\n      \"const\": \"default\",\n      \"default\": \"default\",\n      \"description\": \"The template engine required to render the templates.\",\n      \"title\": \"Template Engine\",\n      \"type\": \"string\"\n    },\n    \"template_engine_ops\": {\n      \"description\": \"Options to pass to the template engine before rendering.\",\n      \"title\": \"Template Engine Ops\",\n      \"type\": \"object\"\n    },\n    \"skip\": {\n      \"description\": \"A list of paths or glob patterns of files to exclude from writing to the destination.\",\n      \"items\": {\n        \"type\": \"string\"\n      },\n      \"title\": \"Skip\",\n      \"type\": \"array\"\n    },\n    \"copy_only\": {\n      \"description\": \"A list of paths or glob patterns of files to write to the destination without rendering.\",\n      \"items\": {\n        \"type\": \"string\"\n      },\n      \"title\": \"Copy Only\",\n      \"type\": \"array\"\n    },\n    \"migrations\": {\n      \"description\": \"TBD\",\n      \"items\": {},\n      \"title\": \"Migrations\",\n      \"type\": \"array\"\n    }\n  },\n  \"required\": [\n    \"template_location\"\n  ],\n  \"title\": \"Pattern\",\n  \"type\": \"object\"\n}\n</code></pre> <p>Fields:</p> <ul> <li> <code>questions</code>                 (<code>List[Question]</code>)             </li> <li> <code>template_location</code>                 (<code>Location</code>)             </li> <li> <code>extra_context</code>                 (<code>Dict[str, Any]</code>)             </li> <li> <code>template_engine</code>                 (<code>TemplateEngine</code>)             </li> <li> <code>template_engine_ops</code>                 (<code>Dict[str, Any]</code>)             </li> <li> <code>skip</code>                 (<code>List[str]</code>)             </li> <li> <code>copy_only</code>                 (<code>List[str]</code>)             </li> <li> <code>migrations</code>                 (<code>List</code>)             </li> </ul> <p>Validators:</p> <ul> <li> <code>validate_template_location</code>                 \u2192                   <code>template_location</code> </li> </ul>"},{"location":"reference/api/project_forge/models/pattern/#project_forge.models.pattern.Pattern-attributes","title":"Attributes","text":""},{"location":"reference/api/project_forge/models/pattern/#project_forge.models.pattern.Pattern.copy_only","title":"copy_only  <code>pydantic-field</code>","text":"<pre><code>copy_only: List[str]\n</code></pre> <p>A list of paths or glob patterns of files to write to the destination without rendering.</p>"},{"location":"reference/api/project_forge/models/pattern/#project_forge.models.pattern.Pattern.extra_context","title":"extra_context  <code>pydantic-field</code>","text":"<pre><code>extra_context: Dict[str, Any]\n</code></pre> <p>Static Key-Values. Values may be template strings.</p>"},{"location":"reference/api/project_forge/models/pattern/#project_forge.models.pattern.Pattern.migrations","title":"migrations  <code>pydantic-field</code>","text":"<pre><code>migrations: List\n</code></pre> <p>TBD</p>"},{"location":"reference/api/project_forge/models/pattern/#project_forge.models.pattern.Pattern.questions","title":"questions  <code>pydantic-field</code>","text":"<pre><code>questions: List[Question]\n</code></pre> <p>A list of question objects that define the available context variables for project generation.</p>"},{"location":"reference/api/project_forge/models/pattern/#project_forge.models.pattern.Pattern.skip","title":"skip  <code>pydantic-field</code>","text":"<pre><code>skip: List[str]\n</code></pre> <p>A list of paths or glob patterns of files to exclude from writing to the destination.</p>"},{"location":"reference/api/project_forge/models/pattern/#project_forge.models.pattern.Pattern.template_engine","title":"template_engine  <code>pydantic-field</code>","text":"<pre><code>template_engine: TemplateEngine = 'default'\n</code></pre> <p>The template engine required to render the templates.</p>"},{"location":"reference/api/project_forge/models/pattern/#project_forge.models.pattern.Pattern.template_engine_ops","title":"template_engine_ops  <code>pydantic-field</code>","text":"<pre><code>template_engine_ops: Dict[str, Any]\n</code></pre> <p>Options to pass to the template engine before rendering.</p>"},{"location":"reference/api/project_forge/models/pattern/#project_forge.models.pattern.Pattern.template_location","title":"template_location  <code>pydantic-field</code>","text":"<pre><code>template_location: Location\n</code></pre> <p>The location of the root directory of the templates. This directory\u2019s name will be rendered using the context.</p>"},{"location":"reference/api/project_forge/models/pattern/#project_forge.models.pattern.Pattern-functions","title":"Functions","text":""},{"location":"reference/api/project_forge/models/pattern/#project_forge.models.pattern.Pattern.get_process_mode","title":"get_process_mode","text":"<pre><code>get_process_mode(path: Path) -&gt; ProcessMode\n</code></pre> <p>Calculates the process mode for a path based on the pattern\u2019s skip and copy_only attributes.</p>"},{"location":"reference/api/project_forge/models/pattern/#project_forge.models.pattern.Pattern.validate_template_location","title":"validate_template_location  <code>pydantic-validator</code>","text":"<pre><code>validate_template_location(\n    value: Union[str, Location], info: ValidationInfo\n) -&gt; Location\n</code></pre> <p>Check that the template_location exists.</p>"},{"location":"reference/api/project_forge/models/pattern/#project_forge.models.pattern.Question","title":"Question  <code>pydantic-model</code>","text":"<p>               Bases: <code>BaseModel</code></p> <p>A question for a pattern.</p> Show JSON schema: <pre><code>{\n  \"$defs\": {\n    \"Choice\": {\n      \"description\": \"A choice to a Question.\",\n      \"properties\": {\n        \"label\": {\n          \"description\": \"The label for this choice when prompted to the user.\",\n          \"pattern\": \"[a-zA-Z_][\\\\w_]*\",\n          \"title\": \"Label\",\n          \"type\": \"string\"\n        },\n        \"value\": {\n          \"anyOf\": [\n            {\n              \"type\": \"string\"\n            },\n            {\n              \"type\": \"integer\"\n            },\n            {\n              \"type\": \"number\"\n            },\n            {\n              \"type\": \"boolean\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"description\": \"The value used when this choice is selected. It should match the questions's type.\",\n          \"title\": \"Value\"\n        },\n        \"skip_when\": {\n          \"default\": \"\",\n          \"description\": \"A template string that will render as `True` if the choice is not valid based on previous context values.\\n\\nTake care to have at least one option without a `skip_when` clause to avoid accidentally creating a situation with no valid choices.\",\n          \"title\": \"Skip When\",\n          \"type\": \"string\"\n        }\n      },\n      \"required\": [\n        \"label\",\n        \"value\"\n      ],\n      \"title\": \"Choice\",\n      \"type\": \"object\"\n    }\n  },\n  \"description\": \"A question for a pattern.\",\n  \"properties\": {\n    \"name\": {\n      \"description\": \"The name of the variable used in the template.\",\n      \"pattern\": \"[a-zA-Z_][\\\\w_]*\",\n      \"title\": \"Name\",\n      \"type\": \"string\"\n    },\n    \"type\": {\n      \"default\": \"str\",\n      \"description\": \"The type of this variable.\",\n      \"enum\": [\n        \"int\",\n        \"float\",\n        \"bool\",\n        \"str\",\n        \"multiline\",\n        \"secret\",\n        \"yaml\",\n        \"json\"\n      ],\n      \"title\": \"Type\",\n      \"type\": \"string\"\n    },\n    \"prompt\": {\n      \"default\": \"\",\n      \"description\": \"The message to ask the user for this information. If no prompt is provided, 'What is the &lt;name&gt;?' is used.\",\n      \"title\": \"Prompt\",\n      \"type\": \"string\"\n    },\n    \"help\": {\n      \"default\": \"\",\n      \"description\": \"Additional information to explain how to answer this question.\",\n      \"title\": \"Help\",\n      \"type\": \"string\"\n    },\n    \"choices\": {\n      \"description\": \"A list of choice values or `choice` objects\",\n      \"items\": {\n        \"$ref\": \"#/$defs/Choice\"\n      },\n      \"title\": \"Choices\",\n      \"type\": \"array\"\n    },\n    \"multiselect\": {\n      \"default\": false,\n      \"description\": \"When `true` allow multiple selections. The type of this context element will then be a list of this question's `type`\",\n      \"title\": \"Multiselect\",\n      \"type\": \"boolean\"\n    },\n    \"default\": {\n      \"default\": null,\n      \"description\": \"Provide a default to save them from typing. \\n\\nWhen using `choices`, the default must be the choice _value_, not its _key_, and must match its _type_. Leave this empty to force the user to answer.\\n\\nThis value may also be a template string rendered using the context so far. This allows you to provide defaults based on previous context elements.\",\n      \"title\": \"Default\"\n    },\n    \"validator\": {\n      \"default\": \"\",\n      \"description\": \"Template string to validate the user input. \\n\\nThis template is rendered using the context so far; it should render _nothing_ if the value is valid and an error message to show to the user otherwise.\",\n      \"title\": \"Validator\",\n      \"type\": \"string\"\n    },\n    \"force_default\": {\n      \"anyOf\": [\n        {\n          \"type\": \"string\"\n        },\n        {\n          \"type\": \"boolean\"\n        }\n      ],\n      \"default\": false,\n      \"description\": \"A condition that, if `True`, will not prompt the user for a value and uses the `default`.\\n\\n`bool` values are used directly. Setting this to `True` is a good way to make this value a computed value.\\n\\n`str` values should be template strings that evaluate to a boolean value.\",\n      \"title\": \"Force Default\"\n    }\n  },\n  \"required\": [\n    \"name\"\n  ],\n  \"title\": \"Question\",\n  \"type\": \"object\"\n}\n</code></pre> <p>Fields:</p> <ul> <li> <code>name</code>                 (<code>str</code>)             </li> <li> <code>type</code>                 (<code>QuestionType</code>)             </li> <li> <code>prompt</code>                 (<code>str</code>)             </li> <li> <code>help</code>                 (<code>str</code>)             </li> <li> <code>choices</code>                 (<code>List[Choice]</code>)             </li> <li> <code>multiselect</code>                 (<code>bool</code>)             </li> <li> <code>default</code>                 (<code>Any</code>)             </li> <li> <code>validator</code>                 (<code>str</code>)             </li> <li> <code>force_default</code>                 (<code>Union[str, bool]</code>)             </li> </ul> <p>Validators:</p> <ul> <li> <code>use_name_if_missing_prompt</code> </li> <li> <code>choice_values_match_question_type</code> </li> </ul>"},{"location":"reference/api/project_forge/models/pattern/#project_forge.models.pattern.Question-attributes","title":"Attributes","text":""},{"location":"reference/api/project_forge/models/pattern/#project_forge.models.pattern.Question.choices","title":"choices  <code>pydantic-field</code>","text":"<pre><code>choices: List[Choice]\n</code></pre> <p>A list of choice values or <code>choice</code> objects</p>"},{"location":"reference/api/project_forge/models/pattern/#project_forge.models.pattern.Question.default","title":"default  <code>pydantic-field</code>","text":"<pre><code>default: Any = None\n</code></pre> <p>Provide a default to save them from typing. </p> <p>When using <code>choices</code>, the default must be the choice value, not its key, and must match its type. Leave this empty to force the user to answer.</p> <p>This value may also be a template string rendered using the context so far. This allows you to provide defaults based on previous context elements.</p>"},{"location":"reference/api/project_forge/models/pattern/#project_forge.models.pattern.Question.force_default","title":"force_default  <code>pydantic-field</code>","text":"<pre><code>force_default: Union[str, bool] = False\n</code></pre> <p>A condition that, if <code>True</code>, will not prompt the user for a value and uses the <code>default</code>.</p> <p><code>bool</code> values are used directly. Setting this to <code>True</code> is a good way to make this value a computed value.</p> <p><code>str</code> values should be template strings that evaluate to a boolean value.</p>"},{"location":"reference/api/project_forge/models/pattern/#project_forge.models.pattern.Question.help","title":"help  <code>pydantic-field</code>","text":"<pre><code>help: str = ''\n</code></pre> <p>Additional information to explain how to answer this question.</p>"},{"location":"reference/api/project_forge/models/pattern/#project_forge.models.pattern.Question.multiselect","title":"multiselect  <code>pydantic-field</code>","text":"<pre><code>multiselect: bool = False\n</code></pre> <p>When <code>true</code> allow multiple selections. The type of this context element will then be a list of this question\u2019s <code>type</code></p>"},{"location":"reference/api/project_forge/models/pattern/#project_forge.models.pattern.Question.name","title":"name  <code>pydantic-field</code>","text":"<pre><code>name: str\n</code></pre> <p>The name of the variable used in the template.</p>"},{"location":"reference/api/project_forge/models/pattern/#project_forge.models.pattern.Question.prompt","title":"prompt  <code>pydantic-field</code>","text":"<pre><code>prompt: str = ''\n</code></pre> <p>The message to ask the user for this information. If no prompt is provided, \u2018What is the ?\u2019 is used."},{"location":"reference/api/project_forge/models/pattern/#project_forge.models.pattern.Question.type","title":"type  <code>pydantic-field</code>","text":"<pre><code>type: QuestionType = 'str'\n</code></pre> <p>The type of this variable.</p>"},{"location":"reference/api/project_forge/models/pattern/#project_forge.models.pattern.Question.validator","title":"validator  <code>pydantic-field</code>","text":"<pre><code>validator: str = ''\n</code></pre> <p>Template string to validate the user input. </p> <p>This template is rendered using the context so far; it should render nothing if the value is valid and an error message to show to the user otherwise.</p>"},{"location":"reference/api/project_forge/models/pattern/#project_forge.models.pattern.Question-functions","title":"Functions","text":""},{"location":"reference/api/project_forge/models/pattern/#project_forge.models.pattern.Question.choice_values_match_question_type","title":"choice_values_match_question_type  <code>pydantic-validator</code>","text":"<pre><code>choice_values_match_question_type() -&gt; Question\n</code></pre> <p>Ensure that all choice values match this question\u2019s type.</p>"},{"location":"reference/api/project_forge/models/pattern/#project_forge.models.pattern.Question.use_name_if_missing_prompt","title":"use_name_if_missing_prompt  <code>pydantic-validator</code>","text":"<pre><code>use_name_if_missing_prompt() -&gt; Question\n</code></pre> <p>Use the name of the question as the prompt if prompt is empty.</p>"},{"location":"reference/api/project_forge/models/pattern/#project_forge.models.pattern-functions","title":"Functions","text":""},{"location":"reference/api/project_forge/models/pattern/#project_forge.models.pattern.find_template_root","title":"find_template_root","text":"<pre><code>find_template_root(\n    root_path: Path, prefix: str = \"{{\"\n) -&gt; Path\n</code></pre> <p>Search for a directory within <code>root_path</code> that starts with <code>prefix</code>.</p>"},{"location":"reference/api/project_forge/models/pattern/#project_forge.models.pattern.read_pattern_file","title":"read_pattern_file","text":"<pre><code>read_pattern_file(path: Union[str, Path]) -&gt; Pattern\n</code></pre> <p>Read, parse, and validate the contents of a pattern file.</p>"},{"location":"reference/api/project_forge/models/task/","title":"task","text":"<p>Tasks are commands to run while rendering a composition.</p>"},{"location":"reference/api/project_forge/models/task/#project_forge.models.task-classes","title":"Classes","text":""},{"location":"reference/api/project_forge/models/task/#project_forge.models.task.Task","title":"Task  <code>pydantic-model</code>","text":"<p>               Bases: <code>BaseModel</code></p> <p>A task to run while rendering a composition.</p> Show JSON schema: <pre><code>{\n  \"description\": \"A task to run while rendering a composition.\",\n  \"properties\": {\n    \"command\": {\n      \"anyOf\": [\n        {\n          \"type\": \"string\"\n        },\n        {\n          \"items\": {\n            \"type\": \"string\"\n          },\n          \"type\": \"array\"\n        }\n      ],\n      \"description\": \"The command to run.\",\n      \"title\": \"Command\"\n    },\n    \"use_shell\": {\n      \"default\": false,\n      \"description\": \"Whether to run the command in a shell.\\n\\nIf `command` is a str, this is always `True`.\",\n      \"title\": \"Use Shell\",\n      \"type\": \"boolean\"\n    },\n    \"env\": {\n      \"anyOf\": [\n        {\n          \"additionalProperties\": {\n            \"type\": \"string\"\n          },\n          \"type\": \"object\"\n        },\n        {\n          \"type\": \"null\"\n        }\n      ],\n      \"default\": null,\n      \"description\": \"Environment variables to set when running the command.\\n\\nEach environment variable value may be a template string rendered using the context so far.\",\n      \"title\": \"Env\"\n    },\n    \"when\": {\n      \"anyOf\": [\n        {\n          \"type\": \"string\"\n        },\n        {\n          \"type\": \"null\"\n        }\n      ],\n      \"default\": null,\n      \"description\": \"A template string that will render as `True` if the task should run.\",\n      \"title\": \"When\"\n    },\n    \"context_variable_name\": {\n      \"anyOf\": [\n        {\n          \"type\": \"string\"\n        },\n        {\n          \"type\": \"null\"\n        }\n      ],\n      \"default\": null,\n      \"description\": \"The name of a context variable that will be set to the command's stdout. If not provided, the the output is not saved to the context.\",\n      \"title\": \"Context Variable Name\"\n    }\n  },\n  \"required\": [\n    \"command\"\n  ],\n  \"title\": \"Task\",\n  \"type\": \"object\"\n}\n</code></pre> <p>Fields:</p> <ul> <li> <code>command</code>                 (<code>str | List[str]</code>)             </li> <li> <code>use_shell</code>                 (<code>bool</code>)             </li> <li> <code>env</code>                 (<code>Optional[EnvDict]</code>)             </li> <li> <code>when</code>                 (<code>Optional[str]</code>)             </li> <li> <code>context_variable_name</code>                 (<code>Optional[str]</code>)             </li> </ul> <p>Validators:</p> <ul> <li> <code>validate_use_shell</code> </li> </ul>"},{"location":"reference/api/project_forge/models/task/#project_forge.models.task.Task-attributes","title":"Attributes","text":""},{"location":"reference/api/project_forge/models/task/#project_forge.models.task.Task.command","title":"command  <code>pydantic-field</code>","text":"<pre><code>command: str | List[str]\n</code></pre> <p>The command to run.</p>"},{"location":"reference/api/project_forge/models/task/#project_forge.models.task.Task.context_variable_name","title":"context_variable_name  <code>pydantic-field</code>","text":"<pre><code>context_variable_name: Optional[str] = None\n</code></pre> <p>The name of a context variable that will be set to the command\u2019s stdout. If not provided, the the output is not saved to the context.</p>"},{"location":"reference/api/project_forge/models/task/#project_forge.models.task.Task.env","title":"env  <code>pydantic-field</code>","text":"<pre><code>env: Optional[EnvDict] = None\n</code></pre> <p>Environment variables to set when running the command.</p> <p>Each environment variable value may be a template string rendered using the context so far.</p>"},{"location":"reference/api/project_forge/models/task/#project_forge.models.task.Task.use_shell","title":"use_shell  <code>pydantic-field</code>","text":"<pre><code>use_shell: bool = False\n</code></pre> <p>Whether to run the command in a shell.</p> <p>If <code>command</code> is a str, this is always <code>True</code>.</p>"},{"location":"reference/api/project_forge/models/task/#project_forge.models.task.Task.when","title":"when  <code>pydantic-field</code>","text":"<pre><code>when: Optional[str] = None\n</code></pre> <p>A template string that will render as <code>True</code> if the task should run.</p>"},{"location":"reference/api/project_forge/models/task/#project_forge.models.task.Task-functions","title":"Functions","text":""},{"location":"reference/api/project_forge/models/task/#project_forge.models.task.Task.validate_use_shell","title":"validate_use_shell  <code>pydantic-validator</code>","text":"<pre><code>validate_use_shell() -&gt; Task\n</code></pre> <p>Set <code>use_shell</code> to True if command is a str.</p>"},{"location":"reference/api/project_forge/models/task/#project_forge.models.task-functions","title":"Functions","text":""},{"location":"reference/api/project_forge/models/task/#project_forge.models.task.execute_task","title":"execute_task","text":"<pre><code>execute_task(task: Task, context: dict) -&gt; dict\n</code></pre> <p>Execute a task.</p> PARAMETER DESCRIPTION <code>task</code> <p>The task to execute</p> <p> TYPE: <code>Task</code> </p> <code>context</code> <p>The current context</p> <p> TYPE: <code>dict</code> </p> RETURNS DESCRIPTION <code>dict</code> <p>The updated context.</p>"},{"location":"reference/api/project_forge/rendering/","title":"Index","text":"<p>Tools for rendering templates and template strings.</p>"},{"location":"reference/api/project_forge/rendering/environment/","title":"environment","text":"<p>Tools and classes for managing the Jinja2 rendering environment.</p>"},{"location":"reference/api/project_forge/rendering/environment/#project_forge.rendering.environment-classes","title":"Classes","text":""},{"location":"reference/api/project_forge/rendering/environment/#project_forge.rendering.environment.InheritanceLoader","title":"InheritanceLoader","text":"<pre><code>InheritanceLoader(inheritance_map: InheritanceMap)\n</code></pre> <p>               Bases: <code>BaseLoader</code></p> <p>Load templates from inherited templates of the same name.</p>"},{"location":"reference/api/project_forge/rendering/environment/#project_forge.rendering.environment.InheritanceLoader-functions","title":"Functions","text":""},{"location":"reference/api/project_forge/rendering/environment/#project_forge.rendering.environment.InheritanceLoader.get_source","title":"get_source","text":"<pre><code>get_source(\n    environment: Environment, template: str\n) -&gt; tuple[str, str | None, Callable[[], bool] | None]\n</code></pre> <p>Load the template.</p>"},{"location":"reference/api/project_forge/rendering/environment/#project_forge.rendering.environment.SuperUndefined","title":"SuperUndefined","text":"<p>               Bases: <code>Undefined</code></p> <p>Let calls to super() work ok.</p>"},{"location":"reference/api/project_forge/rendering/environment/#project_forge.rendering.environment.SuperUndefined-functions","title":"Functions","text":""},{"location":"reference/api/project_forge/rendering/environment/#project_forge.rendering.environment.SuperUndefined.__call__","title":"__call__","text":"<pre><code>__call__() -&gt; str\n</code></pre> <p>If the undefined is called (like super()) it outputs an empty string.</p>"},{"location":"reference/api/project_forge/rendering/environment/#project_forge.rendering.environment.SuperUndefined.__getattr__","title":"__getattr__","text":"<pre><code>__getattr__(name: str) -&gt; Any\n</code></pre> <p>Override the superclass\u2019 getattr method to handle the <code>jinja_pass_arg</code> attribute.</p>"},{"location":"reference/api/project_forge/rendering/environment/#project_forge.rendering.environment-functions","title":"Functions","text":""},{"location":"reference/api/project_forge/rendering/environment/#project_forge.rendering.environment.load_environment","title":"load_environment","text":"<pre><code>load_environment(\n    template_map: Optional[InheritanceMap] = None,\n    extensions: Optional[list] = None,\n) -&gt; Environment\n</code></pre> <p>Load the Jinja2 template environment.</p> PARAMETER DESCRIPTION <code>template_map</code> <p>The template inheritance used to load the templates</p> <p> TYPE: <code>Optional[InheritanceMap]</code> DEFAULT: <code>None</code> </p> <code>extensions</code> <p>A list of Jinja extensions to load into the environment</p> <p> TYPE: <code>Optional[list]</code> DEFAULT: <code>None</code> </p> RETURNS DESCRIPTION <code>Environment</code> <p>The Jinja environment</p>"},{"location":"reference/api/project_forge/rendering/expressions/","title":"expressions","text":"<p>Render template expressions.</p>"},{"location":"reference/api/project_forge/rendering/expressions/#project_forge.rendering.expressions-functions","title":"Functions","text":""},{"location":"reference/api/project_forge/rendering/expressions/#project_forge.rendering.expressions.render_bool_expression","title":"render_bool_expression","text":"<pre><code>render_bool_expression(\n    expression: Union[str, bool],\n    context: Optional[MutableMapping] = None,\n) -&gt; bool\n</code></pre> <p>Render a template expression and convert the result to a boolean.</p> <p>Any string expression that is not a template string is wrapped in an <code>{% if ... %}</code> block.</p> PARAMETER DESCRIPTION <code>expression</code> <p>A string expression, a template string, or a boolean.</p> <p> TYPE: <code>Union[str, bool]</code> </p> <code>context</code> <p>The context used to render a string</p> <p> TYPE: <code>Optional[MutableMapping]</code> DEFAULT: <code>None</code> </p> RETURNS DESCRIPTION <code>bool</code> <p>True if the boolean is True, or the rendered result is not one of <code>False</code>, <code>false</code>, <code>0</code>, an empty string.</p>"},{"location":"reference/api/project_forge/rendering/expressions/#project_forge.rendering.expressions.render_expression","title":"render_expression","text":"<pre><code>render_expression(\n    expression: str,\n    context: Optional[MutableMapping] = None,\n) -&gt; str\n</code></pre> <p>Render a template expression.</p>"},{"location":"reference/api/project_forge/rendering/render/","title":"render","text":"<p>Functions to render a composition using answered questions.</p>"},{"location":"reference/api/project_forge/rendering/render/#project_forge.rendering.render-classes","title":"Classes","text":""},{"location":"reference/api/project_forge/rendering/render/#project_forge.rendering.render-functions","title":"Functions","text":""},{"location":"reference/api/project_forge/rendering/render/#project_forge.rendering.render.render_env","title":"render_env","text":"<pre><code>render_env(\n    env: Environment,\n    path_list: InheritanceMap,\n    context: dict,\n    destination_path: Path,\n) -&gt; Path\n</code></pre> <p>Render the templates in path_list using context.</p>"},{"location":"reference/api/project_forge/rendering/templates/","title":"templates","text":"<p>Management of templates.</p>"},{"location":"reference/api/project_forge/rendering/templates/#project_forge.rendering.templates-classes","title":"Classes","text":""},{"location":"reference/api/project_forge/rendering/templates/#project_forge.rendering.templates.InheritanceMap","title":"InheritanceMap","text":"<p>               Bases: <code>ChainMap[str, TemplateFile]</code></p> <p>Provides convenience functions for managing template inheritance.</p>"},{"location":"reference/api/project_forge/rendering/templates/#project_forge.rendering.templates.InheritanceMap-attributes","title":"Attributes","text":""},{"location":"reference/api/project_forge/rendering/templates/#project_forge.rendering.templates.InheritanceMap.is_empty","title":"is_empty  <code>property</code>","text":"<pre><code>is_empty: bool\n</code></pre> <p>The context has only one mapping and it is empty.</p>"},{"location":"reference/api/project_forge/rendering/templates/#project_forge.rendering.templates.InheritanceMap-functions","title":"Functions","text":""},{"location":"reference/api/project_forge/rendering/templates/#project_forge.rendering.templates.InheritanceMap.inheritance","title":"inheritance","text":"<pre><code>inheritance(key: str) -&gt; list[TemplateFile]\n</code></pre> <p>Show all the values associated with a key, from most recent to least recent.</p> <p>If the maps were added in the order <code>{\"a\": Path(\"1\")}, {\"a\": Path(\"2\")}, {\"a\": Path(\"3\")}</code>, The output for <code>inheritance(\"a\")</code> would be <code>[Path(\"3\"), Path(\"2\"), Path(\"1\")]</code>.</p> PARAMETER DESCRIPTION <code>key</code> <p>The key to look up</p> <p> TYPE: <code>str</code> </p> RETURNS DESCRIPTION <code>list[TemplateFile]</code> <p>The values for that key with the last value first.</p>"},{"location":"reference/api/project_forge/rendering/templates/#project_forge.rendering.templates.ProcessMode","title":"ProcessMode","text":"<p>               Bases: <code>IntFlag</code></p> <p>Ways to process the template.</p> <p>This is a bitmask, so you can combine them.</p>"},{"location":"reference/api/project_forge/rendering/templates/#project_forge.rendering.templates.ProcessMode-attributes","title":"Attributes","text":""},{"location":"reference/api/project_forge/rendering/templates/#project_forge.rendering.templates.ProcessMode.ignore","title":"ignore  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>ignore = 0\n</code></pre> <p>Do not include the template in the inheritance map.</p>"},{"location":"reference/api/project_forge/rendering/templates/#project_forge.rendering.templates.ProcessMode.render","title":"render  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>render = auto()\n</code></pre> <p>Process the contents of the template using the template engine.</p>"},{"location":"reference/api/project_forge/rendering/templates/#project_forge.rendering.templates.ProcessMode.write","title":"write  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>write = auto()\n</code></pre> <p>Write the contents of the template to the output directory.</p>"},{"location":"reference/api/project_forge/rendering/templates/#project_forge.rendering.templates.TemplateFile","title":"TemplateFile  <code>dataclass</code>","text":"<pre><code>TemplateFile(\n    path: Path,\n    process_mode: ProcessMode = ProcessMode.render\n    | ProcessMode.write,\n)\n</code></pre> <p>The template file data model.</p>"},{"location":"reference/api/project_forge/rendering/templates/#project_forge.rendering.templates.TemplateFile-attributes","title":"Attributes","text":""},{"location":"reference/api/project_forge/rendering/templates/#project_forge.rendering.templates.TemplateFile.is_renderable","title":"is_renderable  <code>property</code>","text":"<pre><code>is_renderable: bool\n</code></pre> <p>Is the template file renderable?</p>"},{"location":"reference/api/project_forge/rendering/templates/#project_forge.rendering.templates.TemplateFile.is_writable","title":"is_writable  <code>property</code>","text":"<pre><code>is_writable: bool\n</code></pre> <p>Is the template file writable?</p>"},{"location":"reference/api/project_forge/rendering/templates/#project_forge.rendering.templates.TemplateFile.path","title":"path  <code>instance-attribute</code>","text":"<pre><code>path: Path\n</code></pre> <p>The full path to the template file.</p>"},{"location":"reference/api/project_forge/rendering/templates/#project_forge.rendering.templates.TemplateFile.process_mode","title":"process_mode  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>process_mode: ProcessMode = render | write\n</code></pre> <p>How to process the template file.</p>"},{"location":"reference/api/project_forge/rendering/templates/#project_forge.rendering.templates-functions","title":"Functions","text":""},{"location":"reference/api/project_forge/rendering/templates/#project_forge.rendering.templates.catalog_inheritance","title":"catalog_inheritance","text":"<pre><code>catalog_inheritance(\n    template_info: Sequence[tuple[Path, ProcessModeFn]]\n) -&gt; InheritanceMap\n</code></pre> <p>Create an InheritanceMap that reflects the inheritance of all the template paths.</p>"},{"location":"reference/api/project_forge/rendering/templates/#project_forge.rendering.templates.catalog_templates","title":"catalog_templates","text":"<pre><code>catalog_templates(\n    template_path: Path, process_mode_func: ProcessModeFn\n) -&gt; Dict[str, TemplateFile]\n</code></pre> <p>Catalog templates into a dictionary.</p> <p>This creates a mapping of a relative file name to a full path.</p> <p>For a file structure like:</p> <pre><code>{{ repo_name }}/\n    file1.txt\n    subdir/\n        file2.txt\n    empty-subdir/\n</code></pre> <p>A call to <code>catalog_templates(Path(\"/path-to-templates/{{ repo_name }}/\"), process_mode_fn)</code> would return:</p> <pre><code>{\n    \"{{ repo_name }}\": TemplateFile(\n        Path(\"/path-to-templates/{{ repo_name }}\"), &lt;ProcessMode.render|write: 3&gt;\n    ),\n    \"{{ repo_name }}/file1.txt\": TemplateFile(\n        Path(\"/path-to-templates/{{ repo_name }}/file1.txt\"), &lt;ProcessMode.render|write: 3&gt;\n    ),\n    \"{{ repo_name }}/subdir\": TemplateFile(\n        Path(\"/path-to-templates/{{ repo_name }}/subdir\"), &lt;ProcessMode.render|write: 3&gt;\n    ),\n    \"{{ repo_name }}/subdir/file2.txt\": TemplateFile(\n        Path(\"/path-to-templates/{{ repo_name }}/subdir/file2.txt\"), &lt;ProcessMode.render|write: 3&gt;\n    ),\n    \"{{ repo_name }}/empty-subdir\": TemplateFile(\n        Path(\"/path-to-templates/{{ repo_name }}/empty-subdir\"), &lt;ProcessMode.render|write: 3&gt;\n    ),\n}\n</code></pre> PARAMETER DESCRIPTION <code>template_path</code> <p>The directory to catalog</p> <p> TYPE: <code>Path</code> </p> <code>process_mode_func</code> <p>A function that takes a path and returns a ProcessMode</p> <p> TYPE: <code>ProcessModeFn</code> </p> RETURNS DESCRIPTION <code>Dict[str, TemplateFile]</code> <p>A mapping of the relative path as a string to the full path</p>"},{"location":"reference/api/project_forge/testing/","title":"Index","text":"<p>Utilities for testing Project Forge patterns and compositions.</p>"},{"location":"reference/api/project_forge/testing/#project_forge.testing-classes","title":"Classes","text":""},{"location":"reference/api/project_forge/testing/#project_forge.testing.Forger","title":"Forger","text":"<pre><code>Forger(output_dir: pathlib.Path)\n</code></pre> <p>Class to provide convenient access to the project_forge API.</p>"},{"location":"reference/api/project_forge/testing/#project_forge.testing.Forger-functions","title":"Functions","text":""},{"location":"reference/api/project_forge/testing/#project_forge.testing.Forger.forge","title":"forge","text":"<pre><code>forge(\n    config_path: Optional[pathlib.Path],\n    initial_context: Optional[dict] = None,\n) -&gt; Result\n</code></pre> <p>Build a project from the given config.</p>"},{"location":"reference/api/project_forge/testing/#project_forge.testing.Result","title":"Result  <code>dataclass</code>","text":"<pre><code>Result(\n    exception: Optional[BaseException] = None,\n    exit_code: str | int = 0,\n    project_dir: Optional[pathlib.Path] = None,\n    context: Optional[dict] = None,\n)\n</code></pre> <p>Holds the captured result of the project forge project generation.</p>"},{"location":"reference/api/project_forge/testing/#project_forge.testing-functions","title":"Functions","text":""},{"location":"reference/api/project_forge/testing/#project_forge.testing.run_inside_dir","title":"run_inside_dir","text":"<pre><code>run_inside_dir(\n    command: str, dir_path: Path\n) -&gt; CompletedProcess\n</code></pre> <p>Run a command from inside a given directory, returning the exit status.</p> PARAMETER DESCRIPTION <code>command</code> <p>Command string to execute within the directory</p> <p> TYPE: <code>str</code> </p> <code>dir_path</code> <p>String, path of the directory the command is being run.</p> <p> TYPE: <code>Path</code> </p> RETURNS DESCRIPTION <code>CompletedProcess</code> <p>The result code of the command.</p>"},{"location":"reference/api/project_forge/testing/plugin/","title":"plugin","text":"<p>Utilities for testing the rendering of projects.</p>"},{"location":"reference/api/project_forge/testing/plugin/#project_forge.testing.plugin-classes","title":"Classes","text":""},{"location":"reference/api/project_forge/testing/plugin/#project_forge.testing.plugin-functions","title":"Functions","text":""},{"location":"reference/api/project_forge/testing/plugin/#project_forge.testing.plugin.forger","title":"forger","text":"<pre><code>forger(request: FixtureRequest, tmp_path: pathlib.Path)\n</code></pre> <p>Yield an instance of the Forger helper class that can be used to generate a project from a template.</p>"},{"location":"reference/api/project_forge/testing/plugin/#project_forge.testing.plugin.pytest_addoption","title":"pytest_addoption","text":"<pre><code>pytest_addoption(parser)\n</code></pre> <p>Add the \u2013forge-output-dir option to the pytest command line.</p>"},{"location":"reference/api/project_forge/ui/","title":"Index","text":"<p>User interfaces for answering questions.</p>"},{"location":"reference/api/project_forge/ui/defaults/","title":"defaults","text":"<p>A UI that will return the defaults.</p>"},{"location":"reference/api/project_forge/ui/defaults/#project_forge.ui.defaults-attributes","title":"Attributes","text":""},{"location":"reference/api/project_forge/ui/defaults/#project_forge.ui.defaults-functions","title":"Functions","text":""},{"location":"reference/api/project_forge/ui/defaults/#project_forge.ui.defaults.return_defaults","title":"return_defaults","text":"<pre><code>return_defaults(\n    prompt: str,\n    type: QuestionType = \"str\",\n    help: Optional[str] = None,\n    choices: Optional[dict] = None,\n    default: Any = None,\n    multiselect: bool = False,\n    validator_func: Optional[Callable] = None,\n    **kwargs\n) -&gt; Any\n</code></pre> <p>Return the default value.</p>"},{"location":"reference/api/project_forge/ui/terminal/","title":"terminal","text":"<p>A terminal user interface.</p>"},{"location":"reference/api/project_forge/ui/terminal/#project_forge.ui.terminal-attributes","title":"Attributes","text":""},{"location":"reference/api/project_forge/ui/terminal/#project_forge.ui.terminal-functions","title":"Functions","text":""},{"location":"reference/api/project_forge/ui/terminal/#project_forge.ui.terminal.ask_multiselect","title":"ask_multiselect","text":"<pre><code>ask_multiselect(\n    prompt: str,\n    choices: dict,\n    help: Optional[str] = None,\n    default: Any = None,\n    validator_func: Optional[Callable] = None,\n    **kwargs\n) -&gt; list[Any]\n</code></pre> <p>Ask a question with multiple answers.</p>"},{"location":"reference/api/project_forge/ui/terminal/#project_forge.ui.terminal.ask_question","title":"ask_question","text":"<pre><code>ask_question(\n    prompt: str,\n    type: QuestionType = \"str\",\n    help: Optional[str] = None,\n    choices: Optional[dict] = None,\n    default: Any = None,\n    multiselect: bool = False,\n    validator_func: Optional[Callable] = None,\n    **kwargs\n) -&gt; Any\n</code></pre> <p>Ask the user a question and validate the answer.</p>"},{"location":"reference/api/project_forge/ui/terminal/#project_forge.ui.terminal.ask_select","title":"ask_select","text":"<pre><code>ask_select(\n    prompt: str,\n    choices: dict,\n    help: Optional[str] = None,\n    default: Any = None,\n    validator_func: Optional[Callable] = None,\n    **kwargs\n) -&gt; Any\n</code></pre> <p>Ask a question with multiple choices.</p>"},{"location":"reference/api/project_forge/ui/terminal/#project_forge.ui.terminal.make_validator","title":"make_validator","text":"<pre><code>make_validator(\n    validator_func: Callable,\n) -&gt; Optional[Callable]\n</code></pre> <p>Make a questionary validator from a callable.</p>"},{"location":"tutorials/","title":"Tutorials","text":"<p>This page provides tutorials on how to use project-forge.</p> <p>Warning</p> <p>Tutorials not implemented yet! Tutorials are for learning how to use the package.</p> <p>Tutorials are lessons that take the reader by the hand through a series of steps to complete a project of some kind. Tutorials are learning-oriented.</p> <ul> <li>Help newcomers with getting started</li> <li>Teach readers about your library by making them write code</li> <li>Inspire confidence through examples that work for everyone, repeatably</li> <li>Give readers an immediate sense of achievement</li> <li>Show concrete examples, no abstractions</li> <li>Provide the minimum necessary explanation</li> <li>Avoid any distractions</li> <li>More information</li> </ul>"},{"location":"tutorials/create_a_pattern/","title":"Create a Pattern","text":"<p>We are going to convert an existing project into a pattern. This process is going to require lots of search and replace.</p> <p>In another tutorial, we will break it into several patterns.</p>"},{"location":"tutorials/create_a_pattern/#setup","title":"Setup","text":"<ol> <li>Create a new directory named <code>patterns.</code></li> <li>Download the example project as a <code>.zip</code> file from TODO</li> <li>Decompress the file and copy the <code>todo-manager</code> project into <code>patterns/</code>.</li> <li>Inside the <code>patterns/</code> directory, create a file named <code>core_pattern.toml</code></li> </ol> <p>Note</p> <p>If you are doing this with an actual project, remove the <code>.git</code> directory if it exists.</p>"},{"location":"tutorials/create_a_pattern/#extracting-questions","title":"Extracting questions","text":"<p>Questions are asked of the user during the project generation. Each answer is set as the value of a variable used in patterns. We will go through this example project and highlight information that would or could vary between projects. We will create questions to get the data from the user, and then we will replace the existing values in the example project with placeholders.</p>"},{"location":"tutorials/create_a_pattern/#different-names-in-different-places","title":"Different names in different places","text":"<p>The outer folder is named <code>todo-manager</code>, the code folder is named <code>todo_manager</code>, and the title of the <code>README.md</code> file is <code>Todo Manager</code>. Are these three different variables that require three different questions? Is this one variable with three permutations that only require one question?</p> <p>We will treat them as three variables. However, we don\u2019t necessarily require three answers.</p>"},{"location":"tutorials/create_a_pattern/#project-name","title":"Project name","text":"<p>Let\u2019s start with the title of the <code>README.md</code> file. We\u2019ll call this the <code>project_name</code>. We want to use this wherever we need a human-friendly name. Add a question to <code>core_pattern.toml</code></p> patterns/core_pattern.toml<pre><code>[[questions]]\nname = \"project_name\"\nprompt = \"What is the human-friendly name of the project?\"\ntype = \"str\"\ndefault = \"My Project\"\n</code></pre>"},{"location":"tutorials/create_a_pattern/#package-name","title":"Package name","text":"<p>Now, let\u2019s deal with the outer folder name and the code folder. Python package names (the package name registered with the Python package index) are normalized using hyphens. However, hyphens are not allowed in Python identifiers.</p> <p>We\u2019ll call the name of the code folder the <code>package_name</code>. Add this question to <code>core_pattern.toml</code>:</p> patterns/core_pattern.toml<pre><code># ... previous question\n\n[[questions]]\nname = \"package_name\"\npromp = \"What is the name of the Python package?\"\ntype = \"str\"\ndefault = \"{{ project_name|lower|replace(' ', '_') }}\"\n</code></pre> <p>This sets the default answer to a modification of the previous question\u2019s answer. It converts the answer to lowercase and replaces all spaces with underscores. This is likely what the user wants, and if so, they can accept the default without having to type anything.</p>"},{"location":"tutorials/create_a_pattern/#repo-name","title":"Repo name","text":"<p>We\u2019ll call the name of the outer folder the <code>repo_name</code>. Add this question to <code>core_pattern.toml</code>:</p> patterns/core_pattern.toml<pre><code># ... previous questions\n\n[[questions]]\nname = \"repo_name\"\nprompt = \"What is the name of the project repository?\"\ntype = \"str\"\ndefault = \"{{ package_name|replace('_', '-') }}\"\n</code></pre> <p>This question modifies the answer from <code>package_name</code>, replacing the underscores with hyphens.</p>"},{"location":"tutorials/create_a_pattern/#set-the-placeholders-in-files","title":"Set the placeholders in files","text":"<ul> <li>Search for <code>Todo Manager</code> and replace it with <code>{{ project_name }}</code></li> <li>Search for <code>todo_manager</code> and replace it with <code>{{ package_name }}</code></li> <li>Search for <code>todo-manager</code> and replace it with <code>{{ repo_name }}</code></li> </ul>"},{"location":"tutorials/create_a_pattern/#renaming-files-and-directories-with-placeholders","title":"Renaming files and directories with placeholders","text":"<ul> <li>Rename the <code>todo-manager</code> directory to <code>{{ repo_name }}</code></li> <li>Rename the <code>todo_manager</code> directory to <code>{{ package_name }}</code></li> </ul>"},{"location":"tutorials/quickstart/","title":"Quickstart","text":"<p>Getting started quickly with Project Forge.</p> <p>Warning</p> <p>Quickstart instructions not implemented yet!</p>"},{"location":"tutorials/quickstart/#prerequisites","title":"Prerequisites","text":""},{"location":"tutorials/quickstart/#installation","title":"Installation","text":"<p>From source\u2026from pypi?</p>"},{"location":"tutorials/quickstart/#the-basics","title":"The Basics","text":"<p>To use <code>project-forge</code> in a project:</p> <pre><code>import project_forge\n</code></pre>"},{"location":"tutorials/quickstart/#basic-operations","title":"Basic Operations","text":""},{"location":"tutorials/quickstart/#tips-and-tricks","title":"Tips and Tricks","text":""},{"location":"tutorials/quickstart/#further-reading","title":"Further Reading","text":""}]}